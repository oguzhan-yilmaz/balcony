{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"balcony","text":"<p>balcony is a modern CLI tool that with some killer features:</p> <ul> <li>Auto-fill the required parameters for AWS API calls</li> <li>Read the JSON data of any AWS resource in your account</li> <li>Generate Terraform Import Blocks</li> <li>Generate actual <code>.tf</code> Terraform Resource code</li> </ul> <p>balcony uses read-only operations, it does not take any action on the used AWS account.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip3 install balcony\n</code></pre> <p>Visit Installation &amp; QuickStart Page to get started using balcony</p> Basic usage<pre><code># see options\nbalcony\n\n# list available resources of ec2\nbalcony aws ec2 \n\n# read a resource\nbalcony aws s3 Buckets\n\n# generate terraform import blocks for a resource\nbalcony terraform-import s3 Buckets\n</code></pre>"},{"location":"#features","title":"Features","text":""},{"location":"#read-any-aws-resource","title":"Read any AWS Resource","text":"<p>Related Docs: QuickStart</p> <p></p>"},{"location":"#filter-and-exclude-by-tags","title":"Filter and Exclude by Tags","text":"<ul> <li>aws-jmespath-utils dependency is used to enable JMESPath expressions to filter and exclude resources by tags</li> <li>Following expressions are used to select anything: (<code>=</code>, <code>*=</code>, <code>=*</code>, <code>*=*</code>)</li> <li> </li> </ul>"},{"location":"#you-can-leave-one-side-empty-or-put-a-there-to-discard-that-sides-value","title":"You can leave one side empty or put a <code>*</code> there to discard that sides value","text":""},{"location":"#filter-tags","title":"Filter tags","text":"<ul> <li>Select everything</li> </ul> <pre><code>balcony aws ec2 Instances -js 'DescribeInstances[].Reservations[].Instances[].filter_tags(`[\"=\"]`, @).Tags'\nbalcony aws ec2 Instances -js 'DescribeInstances[].Reservations[].Instances[].filter_tags(`[\"*=\"]`, @).Tags'\nbalcony aws ec2 Instances -js 'DescribeInstances[].Reservations[].Instances[].filter_tags(`[\"=*\"]`, @).Tags'\nbalcony aws ec2 Instances -js 'DescribeInstances[].Reservations[].Instances[].filter_tags(`[\"*=*\"]`, @).Tags'\n</code></pre> <ul> <li>Find named EC2 Instances</li> </ul> <pre><code>balcony aws ec2 Instances -js 'DescribeInstances[].Reservations[].Instances[].filter_tags(`[\"Name=\"]`, @)'\n</code></pre> <ul> <li>Find AWS MAP migration tagged EC2 Instances</li> </ul> <pre><code>balcony aws ec2 Instances -js 'DescribeInstances[].Reservations[].Instances[].filter_tags(`[\"map-migrated=\"]`, @)'\n</code></pre>"},{"location":"#exclude-tags","title":"Exclude tags","text":"<ul> <li>Exclude everything</li> </ul> <pre><code>balcony aws ec2 Instances -js 'DescribeInstances[].Reservations[].Instances[].exclude_tags(`[\"=\"]`, @).Tags'\nbalcony aws ec2 Instances -js 'DescribeInstances[].Reservations[].Instances[].exclude_tags(`[\"*=\"]`, @).Tags'\nbalcony aws ec2 Instances -js 'DescribeInstances[].Reservations[].Instances[].exclude_tags(`[\"=*\"]`, @).Tags'\nbalcony aws ec2 Instances -js 'DescribeInstances[].Reservations[].Instances[].exclude_tags(`[\"*=*\"]`, @).Tags'  \n</code></pre> <ul> <li>Find un-named EC2 Instances</li> </ul> <pre><code>balcony aws ec2 Instances -js 'DescribeInstances[].Reservations[].Instances[].exclude_tags(`[\"Name=\"]`, @)'\n</code></pre> <ul> <li>Find AWS MAP migration un-tagged EC2 Instances</li> </ul> <pre><code>balcony aws ec2 Instances -js 'DescribeInstances[].Reservations[].Instances[].exclude_tags(`[\"map-migrated=\"]`, @)'\n</code></pre>"},{"location":"#generate-terraform-import-blocks","title":"Generate Terraform Import Blocks","text":"<p>Terraform v1.5 introduced import blocks that allows users to define their imports as code.</p> <p><code>balcony terraform-import &lt;service&gt; &lt;resource-name&gt;</code> command generates these import blocks for you.</p> <p><code>balcony terraform-import --list</code> to see the list of supported resources.</p> <p>Related Docs: Generate Terraform Import Blocks Related Docs: Balcony Terraform Import Support Matrix</p> <p></p>"},{"location":"#generate-actual-terraform-resource-code","title":"Generate actual Terraform Resource Code","text":"<p>If you have:</p> <ul> <li>initialized terraform project</li> <li><code>import_blocks.tf</code> file that's generated with <code>balcony terraform-import</code> command</li> </ul> <p>you can run <code>terraform plan -generate-config-out=generated.tf</code> to generate actual <code>.tf</code> resource code.</p> <p>This feature is achieved with the balcony-terraform-import Docker Image.</p> <p>Related Docs: Generate Terraform Code with Docker Image</p> <p></p>"},{"location":"#interactive-wizard-to-create-balcony-import-configurations","title":"Interactive Wizard to create balcony import configurations","text":"<p>Balcony doesn't know how to create terraform <code>import blocks</code> for all of the AWS resources.</p> <p>It can be taught how to do it by creating <code>import-configurations</code> yaml files, but it's a manual process. This is where the interactive wizard comes in.</p> <p>Interactive Wizards asks you required questions to automatically create the <code>import-configurations</code> yaml files.</p> <p>Related Docs: Terraform Import Configuration Wizard</p> <p></p>"},{"location":"_publishing_pypi_package/","title":"Publishing Python Package to PyPI","text":"<pre><code>python3 balcony/cli.py terraform-import-support-matrix --no-md-render &gt; docs/terraform-import-support-matrix.md\npoetry publish --build --username $PYPI_USERNAME --password $PYPI_PASSWORD --skip-existing\n</code></pre>"},{"location":"about-terraform-import/","title":"Developing Balcony terraform import configurations for AWS resources","text":"<p>This document details the process of developing Terraform import configurations for balcony.</p> <p>Tip</p> <p>You can define your own configurations on a local folder that you have, and they'll be loaded to balcony. You just have to set an environment variable.</p> <pre><code>export BALCONY_TERRAFOM_IMPORT_CONFIG_DIR=$HOME/balcony-tf-yamls\n</code></pre> <p>Allowing you to add/override import configurations. </p>"},{"location":"about-terraform-import/#what-is-an-import-block","title":"What is an import block?","text":"<p>Prior to release of  <code>v.1.5</code>, Terraform users had to manually write the Terraform code for existing resources. And then using the <code>terraform import</code> command, they could import it into Terraform state.</p> <p>With the import blocks feature, users can now define their imports as-code, and Terraform will generate the Terraform code for the resource.</p> import_blocks.tf<pre><code># with terraform 1.5+, resources can be imported as-code\nimport {\n  to = aws_instance.example\n  id = \"i-abcd1234\"\n}\n</code></pre> <p>See the relevant docs page for more details</p> <p>Note</p> <ul> <li>Not all resources can be imported into Terraform.     AWS Terraform Provider Documentation must be checked for each resource type.</li> <li>Each resource type has a different <code>import ID format</code>      For example, aws_volume_attachment has import ID format of <code>DEVICE_NAME:VOLUME_ID:INSTANCE_ID</code>)</li> </ul> <p>This means that in order to generate Terraform code for a resource, you'll need to have:</p> <ul> <li><code>terraform type</code> and <code>name</code> of the resource that'll be used to generate the Terraform code for</li> <li>the resource ID that'll be used to import the resource (which is different for each resource type)</li> </ul>"},{"location":"about-terraform-import/#this-is-great-but","title":"This is great, but...","text":"<p>Having to figure out the suitable <code>resource name</code> and <code>import ID</code> for each resource is still some work.</p> <p>And doing this for all of the resources in your AWS account is a lot of work.</p>"},{"location":"about-terraform-import/#lets-automate-this","title":"Let's automate this","text":"<p>With balcony, we already have the capability to read/list any AWS resource. So we can get the JSON data of any resource in an AWS account.</p> <p>Using this data, we'd need to figure out how to generate:</p> <ul> <li><code>import ID format</code> for this type of resource</li> <li>how to name it, so it's unique in the generated Terraform code </li> </ul> <p>Since the <code>import ID format</code> is different for each resource type, we'd need a way to generate it for each resource type.</p> <p>Instead of doing this in the source code, one by one, tediously... We can use a configuration file to define how to generate the <code>import block</code> for each resource type.</p>"},{"location":"about-terraform-import/#creating-the-framework-for-generating-terraform-import-blocks","title":"Creating the framework for generating Terraform import blocks","text":"<p>We need to bind the AWS Resource Types to how they'd be written as Terraform <code>import blocks</code></p> <p>Let's take the example of AWS EC2 Instance, or <code>aws_instance</code> resource type, and figure out what we need to generate the <code>import block</code>.</p> <p>Which AWS API Operation should be called to fetch the data?</p> <p>We are using balcony to fetch the data, so we need to know which AWS API Operation to call. In this case, it's <code>DescribeInstances</code>.</p> <p>Our config must include this information:</p> <pre><code>service: ec2\nresource_node: Instances\noperation_name: DescribeInstances\n</code></pre> <p>You can see the data you'd get using the <code>balcony aws ec2 Instances describe</code> command, which would read the Describe operation specifically.</p> <p>To see the Operations of a ResourceNode, you can use the  <code>--list, -l</code> option. (e.g. <code>balcony aws ec2 Instances --list</code>). This will bring up the Operations and their documentation.</p> <p>Which Terraform to resource type it should use?</p> <p>We know <code>aws_instance</code> is the resource type for EC2 Instances from the Terraform AWS prodiver docs.</p> <p>Let's add this to our config:</p> <pre><code>to_resource_type: aws_instance\n</code></pre> <p>How should the data be filtered?</p> <p>The data returned by the AWS API Operation is usually a JSON. We need to filter this data to get the list of resources we want to generate Terraform code for.</p> <p>This is especially important because we are using balcony, which returns the collection of responses it got from the AWS API Operation. So we definitely need to filter the data using JMESPath data query selectors.</p> <pre><code>jmespath_query: \"[].Reservations[].Instances[]\"\n</code></pre> <p>Here we select from all of the responses, the <code>Reservations</code> key, and then the <code>Instances</code> key from each of the <code>Reservations</code>. This query will result in a concise list of EC2 Instances, allowing us to generate Terraform code for each of them in a loop.</p> <p>Important</p> <p>If you fill in the <code>jmespath_query</code> option, jinja2 templates will be evaluated in the context of the selected data. This means that you don't have to loop over the data, and just access the attrs.</p> <p>How should the <code>import ID</code> be generated?</p> <p>We need a way to allow users to define templates, so Jinja2 is selected as the templating engine.</p> <p>We're passing all of the data we got from the AWS API Operation to the Jinja2 template as the variable <code>data</code>. And if the <code>jmespath_query</code> is used, we're calling the template in a loop, and the current items attributes are directly accessible by their names.</p> <pre><code>id_generator_jinja2_template: \"{{ InstanceId }}\"\n</code></pre> <p>How should the terraform resource name be generated?</p> <p>It's important to generate a unique name for each resource, so that the generated Terraform code is valid.</p> <p>If there're tags defined in the resource data, you can access them by prefixing their name with <code>tag_</code>.</p> <p>AWS manages their resource namings as tags, so it's handy to have direct access to <code>tag_Name</code>.</p> <pre><code>to_resource_name_jinja2_template: \"{{ tag_Name or InstanceId }}\"\n</code></pre> <p>This template will get the Name tag if available, or it'll default to <code>InstanceId</code>.</p>"},{"location":"about-terraform-import/#putting-it-all-together","title":"Putting it all together","text":"<p>We can have a configuration file that looks like this:</p> ec2.yaml<pre><code>import_configurations:\n  - service: ec2\n    resource_node: Instances\n    operation_name: DescribeInstances\n    to_resource_type: aws_instance\n    jmespath_query: \"[].Reservations[].Instances[]\"\n    to_resource_name_jinja2_template: \"{{ tag_Name or InstanceId }}\"\n    id_generator_jinja2_template: \"{{ InstanceId }}\"\n\n  - service: ec2\n    resource_node: Volumes\n    operation_name: DescribeVolumes\n    to_resource_type: aws_ebs_volume\n    jmespath_query: \"[].Volumes[]\"\n    to_resource_name_jinja2_template: \"{{ VolumeId }}\"\n    id_generator_jinja2_template: \"{{ VolumeId }}\"\n</code></pre> <p>Balcony has a special directory <code>balcony/custom_tf_import_configs/</code> for terraform import configurations, and it'll automatically load any <code>.yaml</code> file.</p> <p>Besides from this directory, you can set the <code>BALCONY_TERRAFOM_IMPORT_CONFIG_DIR</code> Environment Variable to point to a directory that contains your import configurations. Your configurations will override the default ones balcony provide.</p> Setting the custom terraform import config .yaml directory<pre><code># create the directory\nmkdir -p $HOME/balcony-tf-yamls\n\n# set the custom terraform import config directory\nexport BALCONY_TERRAFOM_IMPORT_CONFIG_DIR=$HOME/balcony-tf-yamls\n</code></pre> <p>I encourage you to contribute and create PRs for your favorite AWS resources. Peace!</p>"},{"location":"as-a-python-library/","title":"Balcony as a Python Library","text":""},{"location":"as-a-python-library/#using-custom-boto3-session","title":"Using custom boto3 Session","text":"<p>Balcony will use the AWS credentials in your environment by default.</p> <p>You can configure the boto3 Session in your code and pass it to Balcony. </p> <pre><code>from balcony import BalconyAWS\n\nboto3_session = boto3.session.Session(\n    aws_access_key_id='...',\n    aws_secret_access_key='...',\n    aws_session_token = '...',\n    region_name='...',\n    profile_name = '...'\n)\n\nbaws = BalconyAWS(boto3_session)\n</code></pre> <p>If you don't provide your <code>boto3_session</code>, default AWS credentials will be used.</p>"},{"location":"as-a-python-library/#listing-available-aws-services","title":"Listing available AWS services","text":"<pre><code>from balcony import BalconyAWS\nbaws = BalconyAWS()\n\nservice_names = baws.get_available_service_names()\nprint(service_names)\n</code></pre>"},{"location":"as-a-python-library/#reading-a-resource-node","title":"Reading a Resource Node","text":"<p>This operation read all operations for given <code>resource_node_name</code>.</p> <p>For example, if <code>iam.Policy</code> has <code>GetPolicy</code> and <code>ListPolicies</code> operations, both of them will be read.</p> <pre><code>from balcony import BalconyAWS\nbaws = BalconyAWS()\n\nall_policies = baws.read_resource_node('iam', 'Policy')\nprint(all_policies)\n</code></pre>"},{"location":"as-a-python-library/#reading-a-specific-operation","title":"Reading a specific Operation","text":"<p>You can read a single operation by providing it's name.</p> <pre><code>from balcony import BalconyAWS\nbaws = BalconyAWS()\n\npolicies = baws.read_operation(\n    service_name='iam',\n    resource_node_name='Policy',\n    operation_name='ListPolicies'\n)\nprint(policies)\n</code></pre>"},{"location":"as-a-python-library/#listing-the-resourcenodes-of-a-service","title":"Listing the ResourceNodes of a Service","text":"<p>You can traverse the ResourceNodes through the ServiceNode.</p> <pre><code>from balcony import BalconyAWS\nbaws = BalconyAWS()\n\nservice_node = baws.get_service_node(service_name='s3')\nprint(service_node)\nresource_nodes = service_node.get_resource_nodes() \nprint(resource_nodes)\n</code></pre>"},{"location":"comparing-boto3-and-balcony/","title":"Comparing boto3 scripting and using balcony","text":""},{"location":"comparing-boto3-and-balcony/#listing-all-s3-objects-for-all-buckets-in-your-aws-account","title":"Listing all S3 objects for all Buckets in your AWS account","text":"using balcony CLI<pre><code>balcony aws s3 ObjectsV2 --paginate\n</code></pre> using balcony as a Python Library<pre><code>from balcony import BalconyAWS\nbaws = BalconyAWS()\n\nall_policies = baws.read_resource_node('iam', 'Policy', follow_pagination=True)\nprint(all_policies)\n</code></pre> scripting with boto3<pre><code>import boto3\n\ndef get_all_s3_objects(bucket):\n    s3 = boto3.client('s3')\n    response_list = []\n    kwargs = {'Bucket': bucket}\n\n    while True:\n        resp = s3.list_objects_v2(**kwargs)\n        if 'Contents' in resp:\n            response_list.extend(resp['Contents'])\n        try:\n            kwargs['ContinuationToken'] = resp['NextContinuationToken']\n        except KeyError:\n            break\n\n    return response_list\n\ndef list_all_objects_in_all_buckets():\n    s3 = boto3.client('s3')\n    response = s3.list_buckets()\n    all_buckets_objects = {}\n\n    for bucket in response['Buckets']:\n        bucket_name = bucket['Name']\n        all_buckets_objects[bucket_name] = get_all_s3_objects(bucket_name)\n\n    return all_buckets_objects\n\n\nresponse = list_all_objects_in_all_buckets()\n\nfor bucket in response:\n    print(f\"Bucket Name: {bucket}\")\n    for obj in response[bucket]:\n        print(obj)\n</code></pre>"},{"location":"cookbook/","title":"Cookbook","text":""},{"location":"cookbook/#export-aws-api-operation-names","title":"Export AWS API Operation Names","text":"<p>balcony parses the boto3, and <code>export-aws-api-operations</code> command will export the operation names by service as JSON. </p> <pre><code>balcony -d export-aws-api-operations\n</code></pre> <p>You can also save it to a file:</p> <pre><code>balcony -d export-aws-api-operations -o aws-operation-names.json\n</code></pre>"},{"location":"cookbook/#terraform-import-multiple-resources","title":"Terraform Import Multiple Resources","text":"<p>We can use the GNU parallel to run the import commands in parallel. This is useful when you have a lot of resources to import, or want to generate the import blocks for all of the resources in your AWS account.</p> <p>First, let's list the available resource types to import, and generate the <code>balcony terraform-import</code> commands in a text file.</p> <p>You can fill in the <code>grep -E \"\"</code> line with some regex to select resource types(e.g. <code>grep -E \"aws_s3|aws_iam\"</code>)</p> <pre><code>balcony terraform-import --list \\\n    | awk 'NR&gt;1 &amp;&amp; $1!=\"\" {print $1}' \\\n    | awk '{print \"balcony terraform-import -d \" $1 \" --paginate -o \" $1 \"--import-blocks.tf\"}' \\\n    | grep -E \"\" \\\n    &gt; balcony_parallel_commands.txt\n</code></pre> <p>Check out the generated commands in the <code>balcony_parallel_commands.txt</code> file.</p> <pre><code>cat balcony_parallel_commands.txt\n</code></pre> <p>Now we can run the commands in parallel.</p> <pre><code>parallel &lt; balcony_parallel_commands.txt\n</code></pre> <p>This will write to <code>--import-blocks.tf</code> files for each resource type.</p> <pre><code>cat *--import-blocks.tf \n</code></pre>"},{"location":"cookbook/#generate-aws-cli-delete-policy-commands-for-dev-iam-roles","title":"Generate aws-cli delete-policy commands for <code>dev-</code> IAM Roles","text":"<p><code>--paginate</code> option will follow the pagination tokens to make sure that all Policies are read.</p> <pre><code>balcony aws iam Policy \\\n    --jmespath-selector \"GetPolicy[*].Policy\" \\\n    --format \"aws iam delete-policy --policy-arn {Arn}\" \\\n    --pattern \"*dev-*\" \\\n    --paginate \n</code></pre> <p>You can save the output to a <code>.sh</code> file as well</p> <pre><code>balcony aws iam Policy \\\n    --jmespath-selector \"GetPolicy[*].Policy\" \\\n    --format \"aws iam delete-policy --policy-arn {Arn}\" \\\n    --pattern \"*dev-*\" \\\n    --paginate \\\n    --output /tmp/delete_dev_iam_policies.sh\n</code></pre>"},{"location":"cookbook/#generate-aws-cli-stop-instances-commands-for-running-instances","title":"Generate aws-cli stop-instances commands for running instances","text":"<pre><code>balcony aws ec2 Instances \\\n    -js \"DescribeInstances[*].Reservations[*].Instances[?State.Name=='running'][][]\" \\\n    --format \"aws ec2 stop-instances --instance-ids {InstanceId} # {Tags}\"\n</code></pre>"},{"location":"cookbook/#get-a-list-of-each-objects-key-in-an-s3-bucket","title":"Get a list of each Object's Key in an S3 Bucket","text":"<pre><code>balcony aws s3 ObjectsV2 \\\n    --pattern \"*&lt;your-bucket-name&gt;*\" \\\n    -js \"ListObjectsV2[*].Contents[*].Key[]\" \\\n    --paginate --debug\n</code></pre>"},{"location":"cookbook/#get-a-list-of-each-objects-keysize-in-an-s3-bucket-save-it-to-file","title":"Get a list of each Object's Key/Size in an S3 Bucket &amp; save it to file","text":"<pre><code>balcony aws s3 ObjectsV2 \\\n    --pattern \"*&lt;your-bucket-name&gt;*\" \\\n    -js \"ListObjectsV2[*].Contents[*].{Key: Key, Size: Size}[]\" \\\n    --paginate --debug \\\n    --output /tmp/bucket_keys_and_sizes.json\n</code></pre>"},{"location":"docker/","title":"balcony on Docker","text":"<p>Visit the Github packages for balcony: ghcr.io/oguzhan-yilmaz/balcony</p>"},{"location":"docker/#pulling-balcony-from-github-container-registry","title":"Pulling balcony from GitHub Container Registry","text":"<pre><code>docker pull ghcr.io/oguzhan-yilmaz/balcony:latest\n</code></pre>"},{"location":"docker/#alias-for-running-balcony-with-docker","title":"Alias for running balcony with Docker","text":"<pre><code>alias balcony='docker run --rm -ti \\\n                -v ~/.aws:/root/.aws \\\n                -e AWS_PROFILE=\"default\" \\\n                -e AWS_DEFAULT_REGION=\"eu-west-1\" \\\n                ghcr.io/oguzhan-yilmaz/balcony:latest'\n</code></pre> <p>This alias command will mount your <code>~/.aws</code> directory to the created container for the AWS access. With this configuration, your <code>default</code> AWS Profile would be used in the <code>eu-west-1</code> region.</p> <p>After running the command, you can use balcony as usual.</p> <pre><code>balcony info\n\nbalcony aws ec2 Instance --list\n\nbalcony aws s3 Policy --paginate --debug\n</code></pre> <p>You can copy the alias command to your <code>.bashrc</code> or <code>.zshrc</code> to persist it.</p> <p><code>--screen</code>, <code>-s</code> option will not be usable</p> <p>As you run the balcony commands on docker, you don't get an interactive terminal, so the <code>--screen</code>, <code>-s</code> option will be useless.</p>"},{"location":"docker/#running-balcony-w-aws-credential-env-variables","title":"Running balcony w/ AWS Credential Env. Variables","text":"<p>You may configure your AWS Credentials by adding required environment variables on docker run, instead of mounting your <code>~/.aws</code> directory.</p> <pre><code>alias balcony='docker run --rm -ti  \\\n    -e AWS_DEFAULT_REGION=\"eu-west-1\" \\\n    -e AWS_ACCESS_KEY_ID=\"...\" \\\n    -e AWS_SECRET_ACCESS_KEY=\"...\" \\\n    ghcr.io/oguzhan-yilmaz/balcony:latest'\n</code></pre> <pre><code>balcony aws ec2 Instances\n</code></pre>"},{"location":"docker/#building-balcony-docker-image-locally","title":"Building balcony Docker Image locally","text":"<pre><code># build the image and tag it\ndocker build -t balcony-local .\n</code></pre> <pre><code># alias balcony docker image to a single command\nalias balcony='docker run --rm -ti \\\n                -v ~/.aws:/root/.aws \\\n                -e AWS_PROFILE=\"default\" \\\n                -e AWS_DEFAULT_REGION=\"eu-west-1\" \\\n                balcony-local'\n</code></pre> <pre><code>balcony info\n\nbalcony aws ec2 Instances --debug\n</code></pre>"},{"location":"environment-variables/","title":"Environment Variables","text":"Environment Variable Default Value BALCONY_CONFIG_DIR <code>~/.balcony</code> BALCONY_RELATIONS_DIR <code>~/.balcony/relations</code> BALCONY_TERRAFOM_IMPORT_CONFIG_DIR <code>False</code> Changing the balcony config directories<pre><code>export BALCONY_CONFIG_DIR=\"$HOME/.balcony\"\n\nexport BALCONY_RELATIONS_DIR=\"$HOME/.balcony/relations\"\n</code></pre> Introducing your own terraform import config directory<pre><code># This is the directory where balcony will look for user defined terraform import configs\n# This option is False by default. If you want to use it, you need to set it to a directory\nexport BALCONY_TERRAFOM_IMPORT_CONFIG_DIR=\"$HOME/balcony-tf-import-yamls/\"\n</code></pre>"},{"location":"feature-gifs/","title":"Features","text":""},{"location":"feature-gifs/#balcony-terraform-import-features","title":"balcony <code>terraform-import</code> Features","text":""},{"location":"feature-gifs/#balcony-terraform-import-on-docker-features","title":"balcony <code>terraform-import</code> on Docker Features","text":""},{"location":"feature-gifs/#ec2-instances-example","title":"ec2 Instances Example","text":""},{"location":"feature-gifs/#balcony-terraform-wizard-features","title":"balcony <code>terraform-wizard</code> Features","text":""},{"location":"feature-gifs/#ec2-securitygroups-example","title":"ec2 SecurityGroups Example","text":""},{"location":"feature-gifs/#balcony-features","title":"balcony Features","text":""},{"location":"feature-gifs/#list-available-aws-services","title":"List available AWS Services","text":"<p>Use <code>balcony aws</code> to see every AWS service available.</p> <p></p>"},{"location":"feature-gifs/#list-resource-nodes-of-an-aws-service","title":"List Resource Nodes of an AWS Service","text":"<p>Use <code>balcony aws &lt;service-name&gt;</code> to see every Resource Node of a service.</p> <p></p>"},{"location":"feature-gifs/#reading-a-resource-node","title":"Reading a Resource Node","text":"<p>Use <code>balcony aws &lt;service-name&gt; &lt;resource-node&gt;</code> to read operations of a Resource Node.</p> <p></p>"},{"location":"feature-gifs/#documentation-and-input-output-of-operations","title":"Documentation and Input &amp; Output of Operations","text":"<p>Use the <code>--list</code>, <code>-l</code> flag to print the given AWS API Operations documentation, input &amp; output structure.</p> <p></p>"},{"location":"feature-gifs/#enable-debug-messages","title":"Enable Debug messages","text":"<p>Use the <code>--debug</code>, <code>-d</code> flag to see what's going on under the hood!</p> <p></p>"},{"location":"misc/","title":"Star History","text":""},{"location":"quickstart/","title":"Quick Start","text":""},{"location":"quickstart/#installation","title":"Installation","text":"<pre><code>pip3 install balcony\n</code></pre> Set your AWS credentials<pre><code>export AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMPLE\nexport AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\nexport AWS_DEFAULT_REGION=us-west-2\n</code></pre>"},{"location":"quickstart/#run-balcony-on-docker","title":"Run balcony on Docker","text":"<p>You may choose to run balcony with Docker</p>"},{"location":"quickstart/#shell-autocompletion","title":"Shell Autocompletion","text":"Setup for the current shell sessionSetup for your user <pre><code>balcony --help\n\n# give your shell as an argument\nbalcony --show-completion &lt;your-shell&gt;\n\n# run the output on your shell to activate the autocompletion\n</code></pre> <pre><code>balcony --help\n\n# give your shell as an argument\nbalcony --install-completion &lt;your-shell&gt;\n\n# restart your shell\n</code></pre>"},{"location":"quickstart/#about-aws-credentials","title":"About AWS credentials","text":"<p>balcony uses your shell environment for the AWS credentials</p> See the active profile with awscli<pre><code>aws sts get-caller-identity\n</code></pre> Set your AWS profile and region<pre><code>export AWS_PROFILE=default\nexport AWS_REGION=us-east-1\n</code></pre> Set your AWS credentials<pre><code>export AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMPLE\nexport AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\nexport AWS_DEFAULT_REGION=us-west-2\n</code></pre>"},{"location":"quickstart/#list-all-available-aws-services","title":"List all available AWS Services","text":"<pre><code>balcony aws\n</code></pre>"},{"location":"quickstart/#remember-to-get-help","title":"Remember to get --help","text":"<pre><code>balcony --help\nbalcony aws --help\n</code></pre>"},{"location":"quickstart/#list-all-resource-nodes-of-a-service","title":"List all Resource Nodes of a Service","text":"<pre><code>balcony aws iam\n\nbalcony aws ec2\n</code></pre>"},{"location":"quickstart/#see-the-documentation-of-a-resource-node-and-its-operations","title":"See the documentation of a Resource Node and its Operations","text":"<pre><code>balcony aws iam Policy -l\n# or\nbalcony aws iam Policy --list\n# or to open it on a pager\nbalcony aws iam Policy -ls\n</code></pre>"},{"location":"quickstart/#read-a-resource-node","title":"Read a Resource Node","text":"<pre><code>balcony aws iam Policy\n\n# if you are curious to see what's going on\n# under the hood, enable the debug messages\nbalcony aws iam Policy -d\n# or\nbalcony aws iam Policy --debug\n</code></pre>"},{"location":"quickstart/#read-a-resource-nodes-specific-operation","title":"Read a Resource Nodes specific operation","text":"<pre><code>balcony aws iam Policy get\n\nbalcony aws iam Policy list\n</code></pre>"},{"location":"quickstart/#use-paginate-p-option-for-pagination","title":"Use <code>--paginate</code>, <code>-p</code> option for pagination","text":"<p>Using the <code>--paginate</code>, <code>-p</code> option allows you to paginate the outputs if they're truncated. If you don't set this flag you may get incomplete data.</p> <pre><code># Get all instances available on the AWS Account\nbalcony aws ec2 Instances \\\n    -js \"DescribeInstances[*].Reservations[*].Instances[]\" \\\n    --paginate --debug\n</code></pre>"},{"location":"quickstart/#filter-generated-parameters-with-unix-style-pattern-matching","title":"Filter generated parameters with UNIX style <code>--pattern</code> matching","text":"<p>Important note on --pattern option</p> <p>This option only filters the generated api parameters for the given operation.</p> <p>Because of this <code>--pattern</code> matching is only applied to operations with required parameters.</p> <pre><code>balcony aws iam Policy --pattern \"*service-role/*\"\n\n# supports multiple patterns\nbalcony aws iam Policy --pattern \"*service-role/*\" --pattern \"*prod-*\"\n</code></pre>"},{"location":"quickstart/#use-jmespath-queries-for-the-json-data","title":"Use JMESPath queries for the json data","text":"<p>You can use JMESPath (like <code>jq</code>) to query the output data.</p> <p>If you are going to use the balcony as a part of your automation scripts, you should use this option to have a more precise output.</p> <pre><code>balcony aws iam Policy \\\n    --jmespath-selector \"GetPolicy[*].Policy\"\n# or\nbalcony aws iam Policy \\\n    -js \"GetPolicy[*].Policy\"\n</code></pre>"},{"location":"quickstart/#use-format-option-for-customized-output","title":"Use <code>--format</code> option for customized output","text":"<p>Using the <code>--format</code> option allows you to string format the output json data.</p> <p>Must be used with <code>-js | --jmespath-selector</code> option because <code>--format</code> option only works with a list of dictionaries of same structure.</p> <p>Given format string will be applied to each <code>dict</code> in the list, allowing you to use f-strings notation.</p> <pre><code># create stop-instances script for running instances\nbalcony aws ec2 Instances \\\n    -js \"DescribeInstances[*].Reservations[*].Instances[?State.Name=='running'][][]\" \\\n    --format \"aws ec2 stop-instances --instance-ids {InstanceId} # {Tags}\"\n\n# create delete-policy script\nbalcony aws iam Policy \\\n    --jmespath-selector \"GetPolicy[*].Policy\" \\\n    --format 'aws iam delete-policy --policy-arn \"{Arn}\" --version \"{DefaultVersionId}\"'\n</code></pre>"},{"location":"quickstart/#use-output-o-option-for-writing-the-output-to-a-file","title":"Use <code>--output</code>, <code>-o</code> option for writing the output to a file","text":"<p>Using the <code>--output</code>, <code>-o</code> option allows you to save the output data to a file.</p> <pre><code># Get all instances available on the AWS Account\nbalcony aws ec2 Instances \\\n    -js \"DescribeInstances[*].Reservations[*].Instances[]\" \\\n    --paginate --debug \\\n    --output /tmp/balcony-output.json\n</code></pre>"},{"location":"terraform-import-docker/","title":"balcony terraform-import on Docker","text":"<p><code>balcony terraform-import</code> command allows us to get the import blocks for the resources in our AWS account.</p> <p>But it's still not generating the actual Terraform code for us. Let's fix that.</p>"},{"location":"terraform-import-docker/#example-recording-ec2-insances","title":"Example Recording: ec2 Insances","text":""},{"location":"terraform-import-docker/#docker-image","title":"Docker Image","text":"<ul> <li> <p>Github Container Registry: balcony-terraform-import</p> </li> <li> <p>Dockerfile: terraform-import.Dockerfile</p> </li> </ul> Pull the balcony-terraform-import image<pre><code>docker pull ghcr.io/oguzhan-yilmaz/balcony-terraform-import:main\n</code></pre> <p>This Docker image installs <code>balcony</code> and <code>terraform v.1.5+</code> on top of the base image.</p> <p>It also copies over 2 files to image:</p> <ul> <li><code>provider.tf</code>: Used for <code>terraform init</code>ialization on image build-time.</li> <li><code>entrypoint.sh</code>: Bash script for running <code>balcony terraform-import</code> and <code>terraform plan -gen-generate-config-out=</code>.</li> </ul>"},{"location":"terraform-import-docker/#how-to-use-the-balcony-terraform-import-docker-image","title":"How to use the <code>balcony-terraform-import</code> Docker image","text":"<p>Our Docker image has a lot of options, so it's handy to create an <code>alias</code> command for it.</p> <p>There're multiple ways of providing these options. First, let's walk through the options.</p>"},{"location":"terraform-import-docker/#docker-run-options","title":"Docker run Options","text":"<p>Following are docker run options for providing </p> <ul> <li>AWS Credentials to the container,</li> <li>(optional) defining a directory to save the generated files,</li> <li>(optional) and enabling container debug messages</li> </ul> <p>to the container.</p>"},{"location":"terraform-import-docker/#option-aws-credentials","title":"Option: AWS Credentials","text":"<p>1. Mounting your AWS Credential Folder <code>~/.aws/</code></p> <p>If you use <code>AWS CLI</code>, you can mount your <code>~/.aws/</code> folder to the container.</p> <p>You'd also need to set the <code>AWS_PROFILE</code> and <code>AWS_DEFAULT_REGION</code> environment variables to select from your credential files.</p> Docker options for mounting ~/.aws/ folder to container<pre><code>  -v ~/.aws:/root/.aws \\\n  -e AWS_PROFILE=\"default\" \\\n  -e AWS_DEFAULT_REGION=\"eu-west-1\" \\\n</code></pre> <p>2. Directly giving the AWS Credentials in Env Vars</p> <p>You can also directly provide the AWS Credentials in environment variables.</p> AWS Credentials in Environment Variables<pre><code>  -e AWS_ACCESS_KEY_ID=\"AKIAIOSFODNN7EXAMPLE\" \\\n  -e AWS_SECRET_ACCESS_KEY=\"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\" \\\n  -e AWS_DEFAULT_REGION=\"eu-west-1\" \\\n</code></pre> <p>3. Directly giving the Assumed Role AWS Credentials in Env Vars</p> <p>You can also directly provide an Assumed Role AWS Credentials in environment variables.</p> <p>The difference is you also provide the <code>AWS_SESSION_TOKEN</code> environment variable.</p> AWS Credentials in Environment Variables<pre><code>  -e AWS_ACCESS_KEY_ID=\"AKIAIOSFODNN7EXAMPLE\" \\\n  -e AWS_SECRET_ACCESS_KEY=\"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\" \\\n  -e AWS_SESSION_TOKEN=\"wasfjoAfn21ALfj/bPxRfiCYEXAMPLE-SESSION-TOKEN\" \\\n  -e AWS_DEFAULT_REGION=\"eu-west-1\" \\\n</code></pre>"},{"location":"terraform-import-docker/#option-output-directory","title":"Option: Output Directory","text":"<p>Docker image will use <code>/balcony-output</code> as the default output directory. </p> <p>You can mount a folder you have as a volume to the container. This way you'll get the files in your local machine.</p> <p><pre><code>  -v $BALCONY_TF_GEN_OUTPUT_DIR:/balcony-output \\\n</code></pre> We can achieve by providing the docker run with <code>-v &lt;your-directory&gt;:/balcony-output</code></p> <p>You can also copy the output from the terminal window if you don't use this option.</p>"},{"location":"terraform-import-docker/#alias-commands","title":"Alias Commands","text":"<p>You can copy these alias commands to your <code>~/.bashrc</code> or <code>~/.zshrc</code> file to persist them.</p> Alias with ~.aws/ folder mounted<pre><code># set your options here\nBALCONY_AWS_PROFILE=\"hepapi\"\nBALCONY_AWS_DEFAULT_REGION=\"eu-central-1\"\nBALCONY_TF_GEN_OUTPUT_DIR=\"/tmp/balcony-terraform-gen\"\nBALCONY_DEBUG=0\n\n# create the alias command, with your options\nalias balcony-tf-import=\"mkdir -p $BALCONY_TF_GEN_OUTPUT_DIR \\\n    &amp;&amp; docker pull ghcr.io/oguzhan-yilmaz/balcony-terraform-import:main \\\n    &amp;&amp; echo \\\"Generated files will be saved to: $BALCONY_TF_GEN_OUTPUT_DIR\\n\\\" \\\n    &amp;&amp; docker run \\\n        -v ~/.aws:/root/.aws \\\n        -e AWS_PROFILE=\\\"$BALCONY_AWS_PROFILE\\\" \\\n        -e AWS_DEFAULT_REGION=\\\"$BALCONY_AWS_DEFAULT_REGION\\\" \\\n        -e BALCONY_DEBUG=\\\"$BALCONY_DEBUG\\\" \\\n        -v $BALCONY_TF_GEN_OUTPUT_DIR:/balcony-output \\\n        --rm -it ghcr.io/oguzhan-yilmaz/balcony-terraform-import:main\"\n</code></pre> <p>Brief explanation of the alias command:</p> <ul> <li><code>mkdir -p $BALCONY_TF_GEN_OUTPUT_DIR</code>: Create the output directory if it doesn't exist</li> <li><code>docker pull -q ghcr.io/oguzhan-yilmaz/balcony-terraform-import:main</code>: Pull the newer Docker image </li> <li><code>echo \\\"Generated files will be saved to: $BALCONY_TF_GEN_OUTPUT_DIR\\n\\\"</code>: inform about output directory</li> <li><code>docker run</code>: runs the docker image with the options talked above. This kind of alias command is called a function-like alias, allows us to pass arguments to our <code>entrypoint.sh</code>.</li> </ul> Running the 'balcony-tf-import' alias<pre><code>balcony-tf-import ec2 Instances\n\n\nbalcony-tf-import iam Users\n</code></pre> <p>Warning</p> <p>You can't use <code>--output, -o</code> or any other option with the docker image. </p> <p>Docker image only accepts 2 arguments: <code>service</code> and <code>resource-name</code>.</p>"},{"location":"terraform-import-support-matrix/","title":"Balcony Terraform Import Support Matrix","text":"TerraformResourceType Service Resource aws_dynamodb_table dynamodb Table aws_eip ec2 Addresses aws_eip_association ec2 Addresses aws_ami ec2 Images aws_instance ec2 Instances aws_internet_gateway ec2 InternetGateways aws_internet_gateway_attachment ec2 InternetGateways aws_launch_template ec2 LaunchTemplates aws_nat_gateway ec2 NatGateways aws_route_table ec2 RouteTables aws_route ec2 RouteTables aws_route_table_association ec2 RouteTables aws_security_group ec2 SecurityGroups aws_subnet ec2 Subnets aws_ebs_volume ec2 Volumes aws_vpc ec2 Vpcs aws_ecs_cluster ecs Clusters aws_ecs_service ecs Services aws_ecs_task_definition ecs TaskDefinition aws_elasticache_cluster elasticache CacheClusters aws_elasticache_parameter_group elasticache CacheParameterGroups aws_elasticache_subnet_group elasticache CacheSubnetGroups aws_elasticache_global_replication_group elasticache GlobalReplicationGroups aws_elasticache_replication_group elasticache ReplicationGroups aws_elasticache_user_group elasticache UserGroups aws_elasticache_user_group_association elasticache UserGroups aws_elasticache_user elasticache Users aws_lb_listener_certificate elbv2 ListenerCertificates aws_lb_listener elbv2 Listeners aws_lb elbv2 LoadBalancers aws_lb_listener_rule elbv2 Rules aws_lb_target_group elbv2 TargetGroups aws_iam_group_policy_attachment iam AttachedGroupPolicies aws_iam_role_policy_attachment iam AttachedRolePolicies aws_iam_user_policy_attachment iam AttachedUserPolicies aws_iam_group iam Group aws_iam_group_policy iam GroupPolicy aws_iam_instance_profile iam InstanceProfile aws_iam_policy iam Policy aws_iam_role iam Role aws_iam_role_policy iam RolePolicy aws_iam_role_policy iam RolePolicy aws_iam_user iam User aws_iam_user_policy iam UserPolicy aws_iam_user_policy iam UserPolicy aws_lambda_alias lambda Alias aws_lambda_event_source_mapping lambda EventSourceMapping aws_lambda_function lambda Function aws_lambda_function_event_invoke_config lambda FunctionEventInvokeConfig aws_lambda_function_url lambda FunctionUrlConfig aws_lambda_layer_version lambda LayerVersion aws_rds_cluster_endpoint rds DBClusterEndpoints aws_db_parameter_group rds DBClusterParameters aws_rds_cluster rds DBClusters aws_db_instance rds DBInstances aws_db_subnet_group rds DBSubnetGroups aws_db_option_group rds OptionGroups aws_s3_bucket_accelerate_configuration s3 BucketAccelerateConfiguration aws_s3_bucket_acl s3 BucketAcl aws_s3_bucket_analytics_configuration s3 BucketAnalyticsConfiguration aws_s3_bucket_cors_configuration s3 BucketCors aws_s3_bucket_server_side_encryption_configuration s3 BucketEncryption aws_s3_bucket_intelligent_tiering_configuration s3 BucketIntelligentTieringConfiguration aws_s3_bucket_lifecycle_configuration s3 BucketLifecycleConfiguration aws_s3_bucket_logging s3 BucketLogging aws_s3_bucket_metric s3 BucketMetricsConfiguration aws_s3_bucket_policy s3 BucketPolicy aws_s3_bucket_versioning s3 BucketVersioning aws_s3_bucket s3 Buckets aws_s3_bucket_object_lock_configuration s3 ObjectLockConfiguration aws_sns_platform_application sns PlatformApplications aws_sns_topic_subscription sns Subscriptions aws_sns_topic sns Topics aws_sns_topic_policy sns Topics aws_sns_topic_data_protection_policy sns Topics aws_sqs_queue sqs Queues aws_sqs_queue_policy sqs Queues"},{"location":"terraform-import-wizard/","title":"Terraform Import Wizard","text":"<p>Interactive tool to generate balcony terraform <code>import-configurations</code>.</p>"},{"location":"terraform-import-wizard/#example-recording-ec2-securitygroups","title":"Example Recording: ec2 SecurityGroups","text":""},{"location":"terraform-import-wizard/#about-balcony-terraform-import-configurations","title":"About balcony terraform import-configurations","text":"<p>Balcony can generate import blocks for terraform resources if it knows how to do so.</p> <p>We can let balcony know how to generate import blocks by creating a <code>.yaml</code> file, that looks like this:</p> Example terraform import-configuration .yaml file<pre><code>import_configurations:\n  - service: ec2\n    resource_node: Instances\n    operation_name: DescribeInstances\n    to_resource_type: aws_instance\n    jmespath_query: \"[].Reservations[].Instances[]\"\n    to_resource_name_jinja2_template: \"{{ tag_Name or InstanceId }}\"\n    id_generator_jinja2_template: \"{{ InstanceId }}\"\n</code></pre> <p>Related docs: About Terraform Import Configurations</p>"},{"location":"terraform-import-wizard/#about-the-wizard","title":"About the Wizard","text":"<p><code>balcony terraform-wizard</code> is an interactive command that helps you generate the <code>import-configurations</code> yaml files.</p> <p>It asks you questions about the resource you want to import. And validates your answers with confirmation.</p> <p>This makes it very easy to try and find out the correct configuration for your resource.</p> <p>Act of Development might require some reading</p> <p>Please read the related docs before using this feature: </p> <ul> <li>About Terraform Import Configurations</li> <li>Generate Terraform import blocks</li> </ul> <p>And check out example configurations: Github: balcony/custom_tf_import_configs/*.yaml</p>"},{"location":"terraform-import-wizard/#get-started","title":"Get started","text":"Show help page<pre><code>balcony terraform-wizard\n</code></pre> Show documentation for a specific resource<pre><code>balcony terraform-wizard iam Role -ls\n</code></pre> Start the wizard for a specific resource<pre><code>balcony terraform-wizard iam Role \n</code></pre>"},{"location":"terraform-import/","title":"Generate Terraform import blocks with balcony","text":""},{"location":"terraform-import/#example-recording-ec2-securitygroups","title":"Example Recording: ec2 SecurityGroups","text":""},{"location":"terraform-import/#introduction","title":"Introduction","text":"<p>Terraform has released version 1.5, and it includes the import blocks feature that allows users to define their imports as code. </p> <p>This is a great feature that allows you to import existing resources into Terraform and generate Terraform code for them.</p>"},{"location":"terraform-import/#what-is-an-import-block","title":"What is an import block?","text":"<p>Prior to release of  <code>v.1.5</code>, Terraform users had to manually write the Terraform code for existing resources. And then using the <code>terraform import</code> command, they could import it into Terraform state.</p> <p>With the import blocks feature, users can now define their imports as-code, and you can generate the Terraform code for these resources.</p> import_blocks.tf<pre><code># with terraform 1.5+, resources can be imported as-code\nimport {\n  to = aws_instance.example\n  id = \"i-abcd1234\"\n}\n</code></pre>"},{"location":"terraform-import/#balcony-terraform-import-command","title":"<code>balcony terraform-import</code> command","text":"<p><code>balcony terraform-import</code> command allows you to generate the import blocks for the resources in your AWS account.</p> List which resources can be imported into Terraform<pre><code># print the help screen\nbalcony terraform-import --help\n\n# list avaliable resource types to import\nbalcony terraform-import --list\n</code></pre> <p>Note</p> <p>If the resource type you're looking for is not available, you can develop it yourself, locally. Check out the related docs: Developing Terraform Import Configurations. And if you do, please consider contributing it to the project via a PR.</p> Generate import blocks for a resource type in your AWS account<pre><code># Read the first page for ec2 Instances, and generate the import blocks for them\nbalcony terraform-import ec2 Instances\n\n# paginate through the results, ensuring that all of the resources pages are read\nbalcony terraform-import ec2 Instances --paginate\n\n# save output to a file\nbalcony terraform-import ec2 Volumes -p --output /tmp/ec2-volumes-import-blocks.tf\n</code></pre>"},{"location":"terraform-import/#generating-the-actual-terraform-code","title":"Generating the Actual Terraform Code","text":"<p>First, <code>cd</code> into your initialized defined Terraform repo. You should define the AWS Provider Block in your <code>provider.tf</code> file.</p> Terraform repo structure<pre><code>cd your-terraform-repo/\n\n# it should look like this:\n# .\n# \u251c\u2500\u2500 .terraform/\n# \u251c\u2500\u2500 .terraform.lock.hcl\n# \u2514\u2500\u2500 provider.tf \n</code></pre> <p>After that, we can generate the import blocks for the resource type you want to import. In this case, it's EC2 Instances.</p> Generate Terraform import blocks with balcony<pre><code>balcony terraform-import ec2 Instances --paginate -o ec2-instances-import-blocks.tf\n\n# or you can use the terraform resource type\nbalcony terraform-import aws_instance --paginate -o ec2-instances-import-blocks.tf\n</code></pre> See the generated import blocks<pre><code>cat ec2-instances-import-blocks.tf\n</code></pre> <p>Having the import blocks in our terreform repo, we can generate Terraform code using the <code>-generate-config-out</code> option.</p> Generating terraform code using import blocks<pre><code>terraform plan -generate-config-out=generated-ec2-instances.tf\n</code></pre> <p>Use Terraform v.1.5+</p> <p>Make sure to have Terraform version 1.5+ installed on your machine. Otherwise, you'll get an error.</p> <p>When terraform finishes executing, you could see the generated Terraform code in the <code>generated-ec2-instances.tf</code> file.</p> Print out the Generated Terraform code<pre><code>cat generated-ec2-instances.tf\n</code></pre> <p>That's it! You can now use the generated Terraform code to manage your existing resources.</p> <p>You can use balcony terraform-import feature with Docker and generate the Terraform code for it in the container.</p> <p>Can I have the actual Terraform code!?</p> <p>Yeah definitely! I've created a Docker image do exactly that.</p> <p>See the relevant docs on how to run balcony terraform-import on Docker, create an alias command and use it to generate the actual Terraform code for your resources.</p>"},{"location":"terraform-import/#importing-multiple-resources","title":"Importing Multiple Resources","text":"<p>We can use the GNU parallel to run the import commands in parallel. This is useful when you have a lot of resources to import, or want to generate the import blocks for all of the resources in your AWS account.</p> <p>First, let's list the available resource types to import, and generate the <code>balcony terraform-import</code> commands in a text file.</p> <p>You can fill in the <code>grep -E \"\"</code> line with some regex to select resource types(e.g. <code>grep -E \"aws_s3|aws_iam\"</code>)</p> <pre><code>balcony terraform-import --list \\\n    | awk 'NR&gt;1 &amp;&amp; $1!=\"\" {print $1}' \\\n    | awk '{print \"balcony terraform-import -d \" $1 \" --paginate -o \" $1 \"--import-blocks.tf\"}' \\\n    | grep -E \"\" \\\n    &gt; balcony_parallel_commands.txt\n</code></pre> <p>Check out the generated commands in the <code>balcony_parallel_commands.txt</code> file.</p> <pre><code>cat balcony_parallel_commands.txt\n</code></pre> <p>Now we can run the commands in parallel.</p> <pre><code>parallel &lt; balcony_parallel_commands.txt\n</code></pre> <p>This will write to <code>--import-blocks.tf</code> files for each resource type.</p> <pre><code>cat *--import-blocks.tf \n</code></pre> <p>Next Steps</p> <ul> <li> <p>Generating Terraform Code - Official Terraform Documentation</p> </li> <li> <p>All kinds of resources must have it's own import configuration. This is because each resource has it's own unique import identifier, and it must know which AWS API call to make.    You can develop your own import configuration that balcony can understand and serve you with.   Please check out Developing Terraform Import Configurations</p> </li> </ul>"},{"location":"development/about-relations/","title":"About Relations","text":"<p><code>Relation</code> is a basic dataclass that holds the information about the relation between the operations of the AWS services.</p> <p>It's basically a description of where to find a required parameter's value in another operation's output.</p> <p>Balcony traverses each operation, and finds the required parameters. Then it tries to find the Relations among required parameters and other operations outputs.</p> <p>It can't always find the right relations, so some customization might be needed for some operations.</p> Relation class<pre><code>@dataclass\nclass Relation:\n    service_name: str        # AWS service name\n    resource_node_name: str  # ResourceNode name\n    operation_name: str      # given ResourceNode's specific operation name\n    required_shape_name: str # Required parameter name for other operations\n    target_shape_name: str   # Dict Key name from operation's output\n    target_shape_type: str   # Data type of the `target_shape_name`\n    target_path: str         # JMESPath selector for extracting the parameter values\n</code></pre>"},{"location":"development/about-relations/#example-relation-how-to-read-it","title":"Example Relation &amp; How to read it","text":"Example Relation<pre><code>{\n  \"service_name\": \"iam\",\n  \"resource_node_name\": \"Policy\",\n  \"operation_name\": \"ListPolicies\",\n  \"required_shape_name\": \"PolicyArn\",\n  \"target_shape_name\": \"Arn\",\n  \"target_shape_type\": \"string\",\n  \"target_path\": \"Policies[*].Arn\"\n}\n</code></pre> <p>We could read this example relation like this:</p> <ul> <li><code>iam</code> service has a <code>Policy</code> resource node, which has a <code>ListPolicies</code> operation.</li> <li><code>Arn</code> is the key name of the output dictionary of the <code>ListPolicies</code> operation which has a <code>\"string\"</code> type.</li> <li>When you call <code>ListPolicies</code>, you can JMESPath search the response with <code>target_path</code> to get the <code>Arn</code> value out of the output.</li> <li><code>required_shape_name</code>: <code>\"PolicyArn\"</code> is the name of the required parameter that could be populated using output of <code>ListPolicies</code>.</li> </ul> <p>So if any operation had a <code>PolicyArn</code> as a required parameter, we could use the <code>ListPolicies</code> operation to get the <code>Arn</code> value from the output dictionary.</p>"},{"location":"development/custom-resource-nodes/","title":"Custom Class Resource Nodes","text":"<p>balcony has a class named <code>ResourceNode</code> that represent a small group of similarly named AWS Operations.</p> <p>Reading an AWS Operation would go through the following steps within the <code>ResourceNode</code> class:</p> <ol> <li>Get Operations Relations</li> <li>Generate API Parameters from Operation Data</li> <li>Generate JMESPath Selector from Relations</li> <li>Complement API Parameters List</li> </ol> <p>Custom ResourceNode classes can override selected functions to intercept the process of reading an operation. In this manner, balcony behaves as a framework for correctly generating API parameters.</p> <p>Please read this page and check the Diagram of Reading an Operation to get an idea of what is happening under the hood.</p>"},{"location":"development/custom-resource-nodes/#1-get-operations-relations","title":"1. Get Operations Relations","text":"<p>First, we would need to get the relations of the operation.</p> <p>You can override this method to provide your own explicit relations for the operation.</p> <p>balcony will call each operation for each defined <code>Relation</code>s. Balcony will call all of related operations before calling the current operation, and you will get their data in the <code>generate_api_parameters_from_operation_data()</code> function.</p> <pre><code>def get_operations_relations(\n    self, operation_name: str\n) -&gt; Tuple[Union[List[Dict], bool], Union[Error, None]]:\n</code></pre>"},{"location":"development/custom-resource-nodes/#2-generate-api-parameters-from-operation-data","title":"2. Generate API Parameters from Operation Data","text":"<p>Balcony will first collect the <code>Relation</code>s, and will call the related operations. The data returned from the related operations will be passed to this function.</p> <p>This is the main function that's going to generate the api parameters. When this function is run, it'll call:</p> <ul> <li>a. <code>generate_jmespath_selector_from_relations()</code></li> <li>b. <code>complement_api_parameters_list()</code>   functions. So if you were to override this function, a. or b. functions wouldn't be called.</li> </ul> <pre><code>def generate_api_parameters_from_operation_data(\n    self,\n    operation_name: str,\n    relations_of_operation: List[Dict],\n    related_operations_data: Union[List, Dict],\n) -&gt; Tuple[Union[List, bool], Union[Error, None]]:\n</code></pre>"},{"location":"development/custom-resource-nodes/#2a-generate-jmespath-selector-from-relations","title":"2.a. Generate JMESPath Selector from Relations","text":"<p>Balcony uses JMESPath to query JSON data to generate API parameters. You can override this method to provide your own JMESPath selector.</p> <p>This function generates a JMESPath selector from the relations of the operation. This jmespath selector is then used to extract api parameters from the related operations data.</p> <p>You may choose to override this method if every part of the process is working, but the generated jmespath selector is not correct.</p> <pre><code>def generate_jmespath_selector_from_relations(\n    self, operation_name: str, relation_list: List[Dict]\n) -&gt; str:\n</code></pre>"},{"location":"development/custom-resource-nodes/#2b-complement-api-parameters-list","title":"2.b. Complement API Parameters List","text":"<p>After the API parameters are generated, this function is called to complement the generated API parameters.</p> <p>This is a good interception point if the generated API parameters are OK, but you want to add/remove parameters from them.</p> <pre><code>def complement_api_parameters_list(\n    self,\n    operation_name: str,\n    related_operations_data: Union[List, Dict],\n    relations_of_operation: List[Dict],\n    raw_api_parameters_list: List,\n) -&gt; List[Dict]:\n</code></pre> <p>The output of this function will be passed to AWS client to make the read call.</p>"},{"location":"development/developing-custom-resource-nodes/","title":"Developing Custom Resource Nodes","text":"<p>balcony tries it's best to generate the correct relations and API parameters for each operation. But sometimes it's fails to do so.</p> <p>This is especially true for the operations that have a lot of parameters, and/or the parameters are nested in a complex structure.</p> <p>In this case, you can define a customized behavior for a resource node to handle the API parameter generation correctly.</p> <p>balcony provides 2 level of customization for the resource nodes:</p>"},{"location":"development/developing-custom-resource-nodes/#1-yaml-resource-nodes","title":"1. YAML Resource Nodes","text":"<p>You can create a YAML file to alter the behavior of specific ResourceNodes and Operations. Some of the things you can do:</p> <ul> <li>define explicit relations for specific operations</li> <li>override generated api parameters</li> <li>complement the generated api parameters (adding/removing parameters)</li> <li>provide custom jmepath selector for parameter generation</li> </ul> <p>balcony will automatically register the custom <code>YamlResourceNode</code>s defined in the <code>balcony/custom_yamls/</code> folder.</p>"},{"location":"development/developing-custom-resource-nodes/#2-custom-class-resource-nodes","title":"2. Custom Class Resource Nodes","text":"<p>If the required parameters of an Operation is hard to generate, you can choose to implement parameter generation using custom python classes.</p> <p>You can create custom python classes that inherit from the <code>ResourceNode</code> class. This gives you the full control over the process of reading an operation.</p> <p>Note</p> <p>balcony has a custom <code>ResourceNode</code> subclass registry called <code>ResourceNodeRegistry</code>. If the custom class file is under the <code>balcony/custom_nodes/</code> folder, and it's exported to <code>balcony/custom_nodes/__init__.py</code>, the custom class will be automatically registered to balcony.</p> <p>Either you choose to create a YAML resource node or a Python class resource node, your interception points are the same.</p> <p>If you can specify explicit relations and get the data you need with only JMESPath, you can use YAML resource nodes. They're easier to write and maintain.</p> <p>But if you need to implement custom logic to generate the parameters, you can use Python class resource nodes.</p>"},{"location":"development/developing-custom-resource-nodes/#examples","title":"Examples","text":"<p>You can find a documented examples of custom resource nodes in the following files and across the repository:</p> <ul> <li>Custom Class Customization: custom_nodes/iam.py</li> <li>Yaml Customization: custom_yamls/iam.yaml</li> </ul>"},{"location":"development/diagram-of-reading-operations/","title":"Diagram: Reading Operations","text":""},{"location":"development/diagram-of-reading-operations/#sequence-diagram-of-reading-an-operation","title":"Sequence Diagram of Reading an Operation","text":"<pre><code>sequenceDiagram\n  actor User\n  participant SR as ServiceReader\n  participant RN as ResourceNode\n  User-&gt;&gt;SR: read_operation(operation)\n  Note over User,SR: User wants to read an AWS operation\n\n  SR-&gt;&gt;RN: get_operations_relations()\n  Note over SR,RN: Tries to automatically generate relations from boto3\n\n  RN--&gt;&gt;SR: ((List of relations for the operation))\n  loop Calling Related Operations\n    SR-&gt;&gt;SR: read_operation(related_operation)\n    Note over SR,RN: Read alls related operations and saves each response\n  end\n\n\n  SR-&gt;&gt;RN: generate_api_parameters_from_operation_data()\n  RN-&gt;&gt;+RN: generate_jmespath_selector_from_relations()\n  Note left of RN: Tries to generate a JMESPath query &lt;br/&gt;for generating api parameter dicts\n\n  RN-&gt;&gt;+RN: complement_api_parameters_list()\n  Note left of RN: Adjusts additional parameters&lt;br/&gt;(e.g. MaxKeys)\n\n  Note over SR,RN: Tries to generate api parameters from related operations data\n\n  RN--&gt;&gt;SR: ((Generated API Parameters for the operation))\n\n\n\n\n  loop Calling the original Operation with it's generated params\n    SR-&gt;&gt;SR: call_operation(api_param)\n    Note over SR,RN: Calls the original operation with generated api parameters &lt;br/&gt; and saves each response\n  end\n\n\n  SR-&gt;&gt;SR: search_operation_data(operation)\n  Note over User,SR: List of all the saved responses&lt;br/&gt;of the operation\n\n  SR--&gt;&gt;User: ((All responses for the operation))\n</code></pre>"},{"location":"development/yaml-resource-nodes/","title":"Yaml Resource Nodes","text":"<p>You can create a YAML file to alter the behavior of specific ResourceNodes and Operations. </p> <p>Complete YAML example</p> <p>Check out the documented YAML file: balcony/custom_yamls/_example_service.yaml in the repository.</p>"},{"location":"development/yaml-resource-nodes/#yaml-structure","title":"YAML Structure","text":"<p>Custom YAML files are defined in the <code>custom_yamls/</code> folder and picked up by balcony automatically.</p> <p>balcony uses <code>pydantic</code> for configuration input validation, and apart from <code>service_name</code> and <code>resource_node_name</code> all other keys are optional. </p> <p>The custom yaml file should be in the following format:</p> balcony/custom_yamls/_example_service.yaml<pre><code># This is an example config for customizing behaviors of Resource Nodes.\n# Almost all features you can define are **optional**, define what you need.\n# It's advised to check out other .yaml files.\nservice_name: &lt;service-name&gt; # AWS Service short name\nresource_nodes:\n- resource_node_name: &lt;resource-node-name&gt; # non-optional\n  # rest of this level keys are all optional \n  extra_relations: \n    # extra_relations will be visible to the current and all other \n    # operations in this Service. Use this feature to add a missing \n    # Relation that can also benefit other operations.\n    - service_name: &lt;&gt; \n      resource_node_name: &lt;&gt; \n      operation_name: &lt;&gt;\n      required_shape_name: &lt;&gt; \n      target_shape_name: &lt;&gt;\n      target_shape_type: &lt;&gt;\n      target_path: &lt;&gt;\n  operations:\n    # Operation level customization must define a specific `operation_name` \n    - operation_name: &lt;operation-name&gt; \n      # Pagination token mapping customization\n      pagination_token_mapping:\n        output_key: NextContinuationToken # from output, get this key and\n        parameter_name: ContinuationToken # pass it to this parameter\n      # This option overrides the `complement_api_parameters_list` function.\n      complement_api_parameters:\n        # This option will be evoked after api parameter generation is \n        # complete. You can use this feature to add key/value pairs, \n        - action: add\n          data:\n            any: data\n            is: fine\n            to: add\n        #  or remove keys from all generated API parameters.\n        - action: remove\n          keys:\n            - remove\n            - these\n            - keys\n      # This option overrides the `generate_jmespath_selector_from_relations`.\n      jmespath_selector: &lt;jmespath-selector&gt;\n      # This operation will be called with all of it's related operations \n      # defined in the Relations. You can craft a jmespath selector query \n      # to extract the api parameters list. Adviced to be used with \n      # `explicit_relations` feature.\n\n      # This option overrides the `get_operations_relation` function.\n      explicit_relations:\n        # You can define explicit relations for this specific operation.\n        # If you are going to also provide `jmespath_selector` option in \n        #   this yaml, you don't need to specify anthing other than service, \n        #   resource and operation name.\n        # All the `operation_name`s you define in explicit_relations, will \n        #   be called before reading the current operation. Use both features \n        #   to request related operations data and extract api parameters from it. \n        - service_name: &lt;&gt;\n          resource_node_name: &lt;&gt; \n          operation_name: &lt;&gt;\n          required_shape_name: &lt;&gt; \n          target_shape_name: &lt;&gt;\n          target_shape_type: &lt;&gt;\n          target_path: &lt;&gt;\n      # This option overrides the `generate_api_parameters_from_operation_data`\n      override_api_parameters:\n        # The function will only be called with the list of dicts you define here.\n        # This will bypass jmespath_selector and jmespath_selector features.\n        - set: static\n          params: for\n          this: operation\n</code></pre>"},{"location":"how-it-works/about-balcony/","title":"About balcony","text":""},{"location":"how-it-works/about-balcony/#python-lets-you-inspect-anything-on-runtime","title":"Python lets you inspect anything on runtime","text":"<p>In Python, everything is an object. Even the <code>modules</code> are objects.</p> <p>When a module is <code>import</code>ed, it can be queried for its composite objects on runtime. </p> Listing boto3 scope<pre><code>print(dir(boto3))\n# [..., '__version__, 'client', 'docs','resources', 'session', 'utils']\n</code></pre> <p>AWS SDK exposes the AWS API on service basis, accessible through service <code>clients</code>. </p> <pre><code>iam_client = boto3.client('iam')\n</code></pre>"},{"location":"how-it-works/about-balcony/#balcony-parses-boto3-clients","title":"balcony parses boto3 clients","text":"<p>For each available AWS service, its <code>boto3.client</code> is created and parsed for it's functions.</p> <p>Every <code>client</code> has a <code>_PY_TO_OP_NAME</code> mapping that looks like this:</p> key value attach_role_policy AttachRolePolicy detach_role_policy DetachRolePolicy create_role CreateRole delete_role DeleteRole get_role GetRole <p><code>_PY_TO_OP_NAME</code> represents a mapping from the pythonic function names to actual AWS HTTP API operation names. </p> <p>AWS API Operation names follows a nice <code>Verb</code>+<code>Resource(s)</code> convention. </p> <p>Read-only operations have <code>Get</code>, <code>List</code>, <code>Describe</code> verbs.</p>"},{"location":"how-it-works/about-balcony/#balcony-only-uses-the-read-only-operations","title":"balcony only uses the read-only operations","text":"<p>Balcony only uses the Operation names starting with <code>Get</code>, <code>List</code>, <code>Describe</code> verbs.</p> <p>This means that it won't take any action on your AWS account other than reads.</p>"},{"location":"how-it-works/about-balcony/#quick-look-at-some-of-the-iam-operations","title":"Quick look at some of the IAM operations","text":"<p>Let's take the a look at <code>IAM</code> client, and how <code>balcony</code> groups them together.</p> <p>Here's some IAM operations:</p> get operations list operations GetGroup ListGroups GetGroupPolicy ListGroupPolicies GetPolicy ListPolicies GetRole ListRoles GetRolePolicy ListRolePolicies GetUser ListUsers"},{"location":"how-it-works/about-balcony/#operations-can-be-grouped-under-their-resource-names","title":"Operations can be grouped under their resource names","text":"<p>Naming convention allows parsing CamelCase operation names to <code>Verb</code>+<code>ResourceNodeName(s)</code> format. Plurality is also taken into account.</p> <p>Some operations have the same <code>ResourceNodeName</code> but a different <code>Verb</code>. </p> Resource Node Operations Group GetGroup, ListGroups GroupPolicy GetGroupPolicy, ListGroupPolicies Policy GetPolicy, ListPolicies Role GetRole, ListRoles RolePolicy GetRolePolicy, ListRolePolicies User GetUser, ListUsers <p>These operations are grouped under their respective <code>ResourceNode</code>.  Here's the tree view of an example resource node:</p> Composition of ServiceNode, ResourceNode and Operations<pre><code>ServiceNode: (iam)\n\u2502\n\u251c\u2500\u2500 ResourceNode: (Role)\n\u2502   \u2514\u2500\u2500 operation_names: list\n\u2502       \u251c\u2500\u2500 GetRole\n\u2502       \u2514\u2500\u2500 ListRoles\n\u2502\n\u2514\u2500\u2500 ResourceNode: (Policy)\n    \u2514\u2500\u2500 operation_names: list\n        \u251c\u2500\u2500 GetPolicy\n        \u2514\u2500\u2500 ListPolicies\n</code></pre>"},{"location":"how-it-works/about-boto3/","title":"About boto3 and AWS API","text":"<p>Boto3 is the Amazon Web Services Software Development Kit (AWS SDK) for Python, which allows Python developers to write software that makes use of AWS services.</p> <p><code>boto3</code> is simply a Python wrapper for the existing AWS HTTP API, providing pythonic functions to match the corresponding AWS API Operation.</p> <p>AWS HTTP API is constantly being updated, and the SDKs must match them. We can infer that AWS team has to maintain multitude of SDKs for the popular programming languages, and have them match the HTTP API.</p> <p>Absolute unit size of the AWS SDK &amp; API</p> Entity Type Count Services 318+ Read-only Operations 4577+ All Operations 12129+ <p>Instead of creating a python function that'd make a call to AWS HTTP API, <code>botocore</code> team opted to abstract the whole API definition to underlying service <code>.json</code> files.</p> <pre><code>import boto3\niam_client = boto3.client('iam')\n</code></pre> <p>When you create a <code>boto3.client</code> object like this, the underlying JSON files are used to dynamically create clients during runtime. These files are versioned to match the API.</p> <p>You also can see that we get clients by providing their string names, instead of accessing them as composite objects, like <code>boto3.iam</code> \u2014 hinting at its generated nature.</p>"},{"location":"how-it-works/about-boto3/#service-definition-json-files","title":"Service definition json files","text":"<p>These files are defined in the botocore/data/**/ for each AWS Service.</p> <p>For example, you can inspect the AWS IAM Service botocore service definition json file.</p> <p>These files encapsulate everything needed for making every API request exist in a service:</p> <ul> <li>endpoint \u2014 URI</li> <li>input format \u2014 Parameters</li> <li>output format \u2014 Response</li> <li>possible errors \u2014 Exceptions</li> </ul>"},{"location":"how-it-works/about-boto3/#outline-of-boto-service-definitions","title":"Outline of boto service definitions","text":"<p>json outline</p> botocore/botocore/data/iam/2010-05-08/service-2.json<pre><code>{\n  \"version\":\"2.0\",\n  \"metadata\": {...},\n  \"operations\":{...},\n  \"shapes\":{...},\n  \"documentation\": \"...\"\n}\n</code></pre> <p>metadata</p> <p>Defines the metadata of an AWS Service.</p> <pre><code>\"metadata\":{\n    \"apiVersion\":\"2010-05-08\",\n    \"endpointPrefix\":\"iam\",\n    \"globalEndpoint\":\"iam.amazonaws.com\",\n    \"protocol\":\"query\",\n    \"serviceAbbreviation\":\"IAM\",\n    \"serviceFullName\":\"AWS Identity and Access Management\",\n    \"serviceId\":\"IAM\",\n    \"signatureVersion\":\"v4\",\n    \"uid\":\"iam-2010-05-08\",\n    \"xmlNamespace\":\"https://iam.amazonaws.com/doc/2010-05-08/\"\n}\n</code></pre> <p>shapes</p> <p><code>Shape</code> is a nested data abstraction that is able to represent any data structure, created by <code>boto</code> team.</p> <p><code>Shape</code>s are used to define function input &amp; output structures.</p> <p>Every data type used in a service is available on it's <code>.shapes</code> definition.</p> <pre><code>\"shapes\":{\n    \"GetPolicyRequest\":{\n        \"type\":\"structure\",\n        \"required\":[\"PolicyArn\"],\n        \"members\":{\n            \"PolicyArn\":{\n              \"shape\":\"arnType\",\n              \"documentation\":\"The Amazon Resource Name(ARN)\n                               of the managed policy\"\n            }\n        }\n    }\n}\n</code></pre> <p>operations</p> <p>Types of requests(API calls) you can make to AWS API are internally called <code>Operation</code>.</p> <p>Operations define <code>input_shape</code> and <code>output_shape</code> for its input &amp; output data structure. It also defines the required parameters for an operation. And also the possible exceptions you might get calling this operation.</p> <pre><code>\"operations\":{\n    \"GetPolicy\":{\n      \"name\":\"GetPolicy\",\n      \"http\":{\n        \"method\":\"POST\",\n        \"requestUri\":\"/\"\n      },\n      \"input\":{\"shape\":\"GetPolicyRequest\"},\n      \"output\":{\n        \"shape\":\"GetPolicyResponse\",\n        \"resultWrapper\":\"GetPolicyResult\"\n      },\n      \"errors\":[\n        {\"shape\":\"NoSuchEntityException\"},\n        {\"shape\":\"InvalidInputException\"},\n        {\"shape\":\"ServiceFailureException\"}\n      ],\n      \"documentation\":\"&lt;p&gt;Retrieves information about the\n      specified managed policy, including the policy's default\n      version and the...\"\n    }\n}\n</code></pre>"},{"location":"how-it-works/about-boto3/#boto3-service-clients-their-operations","title":"boto3 service clients &amp; their operations","text":"<p>Every boto3 client has a <code>_PY_TO_OP_NAME</code> mapping that looks like this:</p> boto3 client function Operation Name attach_role_policy AttachRolePolicy create_role CreateRole delete_role DeleteRole detach_role_policy DetachRolePolicy get_role GetRole <p>This represents a mapping from the python function names to actual operation names.</p> <p>You might be already familiar with <code>Operations</code> because they are the exact same thing as the Action segment on IAM Policies.</p> <p>Example IAM Policy</p> <pre><code>{\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Resource\": \"*\",\n      \"Action\": [\n        \"cloudwatch:Describe*\",\n        \"ec2:DescribeSubnets\",\n        \"ec2:DescribeVpcs\",\n        \"iam:ListRoles\",\n        \"iam:GetRole\",\n        \"logs:Create*\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"reference/aws/","title":"AWS Provider","text":""},{"location":"reference/aws/#balcony.aws.BalconyAWS","title":"<code>BalconyAWS</code>","text":"<p>Provides a concise interface for using balcony's functionalities.</p> <p>It can be used to reading AWS Operations, or accessing underlying ServiceNodes and ServiceReaders.</p> Creating a BalconyAWS obj and reading IAM Roles<pre><code>baws = BalconyAWS()\nroles = baws.read_resource_node('iam', 'Role', follow_pagination=True)\nprint(roles)\n</code></pre> Creating a BalconyAWS obj and reading IAM Roles w/ Custom session<pre><code>from balcony import BalconyAWS\n\nboto3_session = boto3.session.Session(\n    aws_access_key_id='...',\n    aws_secret_access_key='...',\n    aws_session_token = '...',\n    region_name='...',\n    profile_name = '...'\n)\n\nbaws = BalconyAWS(boto3_session)\nroles = baws.read_resource_node('iam', 'Role', follow_pagination=True)\n</code></pre>"},{"location":"reference/aws/#balcony.aws.BalconyAWS.__init__","title":"<code>__init__(boto3_session=None)</code>","text":"<p>Initializes this object with an optional <code>boto3.session.Session</code> object. If it's not provided, default boto3 session is created from the shell credentials.</p> <p>Parameters:</p> Name Type Description Default <code>boto3_session</code> <code>Optional[Session]</code> <p>Custom boto3 Session object. If not given,                                                         default Session will be used.</p> <code>None</code>"},{"location":"reference/aws/#balcony.aws.BalconyAWS.get_available_service_names","title":"<code>get_available_service_names()</code>","text":"<p>Lists available AWS service namese</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]: Available service names for current <code>boto3.session.Session</code></p>"},{"location":"reference/aws/#balcony.aws.BalconyAWS.get_service_node","title":"<code>get_service_node(service_name)</code>","text":"<p>Gets or creates the ServiceNode.</p> <p>Parameters:</p> Name Type Description Default <code>service_name</code> <code>str</code> <p>Name of the AWS Service.</p> required <p>Returns:</p> Name Type Description <code>ServiceNode</code> <code>ServiceNode</code> <p>ServiceNode object representing an AWS Service</p>"},{"location":"reference/aws/#balcony.aws.BalconyAWS.get_service_reader","title":"<code>get_service_reader(service_name)</code>","text":"<p>Gets the ServiceReader obj from the ServiceNode obj.</p> <p>Parameters:</p> Name Type Description Default <code>service_name</code> <code>str</code> <p>Name of the AWS Service.</p> required <p>Returns:</p> Name Type Description <code>ServiceReader</code> <code>ServiceReader</code> <p>ServiceReader object with the read capabilities, tied to a ServiceNode.</p>"},{"location":"reference/aws/#balcony.aws.BalconyAWS.read_operation","title":"<code>read_operation(service_name, resource_node_name, operation_name, match_patterns=None, refresh=False, follow_pagination=False)</code>","text":"<p>Call the AWS API operation for the given <code>service_name</code>, <code>resource_node_name</code> and <code>operation_name</code> values.</p> <p>Parameters:</p> Name Type Description Default <code>service_name</code> <code>str</code> <p>AWS Service name.</p> required <code>resource_node_name</code> <code>str</code> <p>AWS ResourceNode name</p> required <code>operation_name</code> <code>str</code> <p>AWS Read opeartion name</p> required <code>match_patterns</code> <code>Optional[List[str]]</code> <p>UNIX style patterns for generated required_parameters. Defaults to None.</p> <code>None</code> <code>refresh</code> <code>Optional[bool]</code> <p>Force to re-read instead of returning the data from cache.. Defaults to False.</p> <code>False</code> <code>follow_pagination</code> <code>bool</code> <p>Follow pagination tokens. If not only set True, one page call will be made.</p> <code>False</code> <p>Returns:</p> Type Description <code>Union[dict, bool]</code> <p>Union[dict,bool]: Read Operation data, or False.</p>"},{"location":"reference/aws/#balcony.aws.BalconyAWS.read_resource_node","title":"<code>read_resource_node(service_name, resource_node_name, match_patterns=None, refresh=False, follow_pagination=False)</code>","text":"<p>Reads all available Read operations of the given ResourceNode.</p> <p>Parameters:</p> Name Type Description Default <code>service_name</code> <code>str</code> <p>Name of the AWS Service</p> required <code>resource_node_name</code> <code>str</code> <p>Name of the AWS Resource Node</p> required <code>match_patterns</code> <code>Optional[List[str]]</code> <p>UNIX style patterns for generated required_parameters. Defaults to None.</p> <code>None</code> <code>refresh</code> <code>bool</code> <p>Force to re-read instead of returning the data from cache.. Defaults to False.</p> <code>False</code> <code>follow_pagination</code> <code>bool</code> <p>Follow the pagination tokens if the output is truncated. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>Union[dict, bool]</code> <p>Union[dict,bool]: Read ResourceNode data or False</p>"},{"location":"reference/botocore_utils/","title":"botocore utils","text":""},{"location":"reference/botocore_utils/#balcony.botocore_utils.cleanhtml","title":"<code>cleanhtml(raw_html)</code>","text":"<p>Removes the HTML tags from given raw_html</p> <p>Parameters:</p> Name Type Description Default <code>raw_html</code> <code>str</code> <p>HTML string to clean the tags off of</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>HTML with tags removed</p>"},{"location":"reference/botocore_utils/#balcony.botocore_utils.find_key_in_dict_keys","title":"<code>find_key_in_dict_keys(key, dict_keys)</code>","text":"<p>Case insensitive search for a <code>key</code> in a <code>list</code> or <code>dict.keys()</code>. Returns the existing key.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Search case insensively for</p> required <code>dict_keys</code> <code>Union[list, dict]</code> <p>In a list or keys of dictionary</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Found key that case insensively matches the given key.</p>"},{"location":"reference/botocore_utils/#balcony.botocore_utils.flatten_shape_to_its_non_collection_shape_and_target_paths","title":"<code>flatten_shape_to_its_non_collection_shape_and_target_paths(shape)</code>","text":"<p>Return a flat list of shapes all member shapes w/ their JMESPath selector <code>target_path</code></p> <p>Parameters:</p> Name Type Description Default <code>shape</code> <code>Shape</code> <p>botocore shape to list its members</p> required <p>Returns:</p> Type Description <code>List[ShapeAndTargetPath]</code> <p>List[ShapeAndTargetPath]: (shape, target_path) custom namedtuple</p>"},{"location":"reference/botocore_utils/#balcony.botocore_utils.generate_rich_tree_from_shape","title":"<code>generate_rich_tree_from_shape(shape, remove_documentation=False)</code>","text":"<p>Genereate a rich Tree containing <code>shape</code> and it's members.</p>"},{"location":"reference/botocore_utils/#balcony.botocore_utils.get_input_shape","title":"<code>get_input_shape(operation_model)</code>","text":"<p>Get the input shape of the operation model</p> <p>Parameters:</p> Name Type Description Default <code>operation_model</code> <code>OperationModel</code> <p>botocore OperationModel</p> required <p>Returns:</p> Name Type Description <code>Shape</code> <code>Shape</code> <p>Input Shape of the OperationModel</p>"},{"location":"reference/botocore_utils/#balcony.botocore_utils.get_max_results_value_from_shape","title":"<code>get_max_results_value_from_shape(input_shape)</code>","text":"<p>Finds the <code>MaxResults</code> highest value for an input shape.</p> <p>Parameters:</p> Name Type Description Default <code>input_shape</code> <code>Shape</code> <p>Input shape of an operation. Generally postfixed with <code>Request</code>.</p> required <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p><code>MaxResults</code> highest value if found in the Shape definition</p>"},{"location":"reference/botocore_utils/#balcony.botocore_utils.get_members_shapes","title":"<code>get_members_shapes(shape, _recursion_count=0)</code>","text":"<p>Get the member shapes of and input or output Shape.</p> <p>Parameters:</p> Name Type Description Default <code>shape</code> <code>Shape</code> <p>Shape to get members from</p> required <p>Returns:</p> Type Description <code>List[Shape]</code> <p>List[Shape]: Member Shapes, added <code>key_name</code> and <code>parent_name</code> values to objects.</p>"},{"location":"reference/botocore_utils/#balcony.botocore_utils.get_required_parameter_shapes_from_operation_model","title":"<code>get_required_parameter_shapes_from_operation_model(operation_model)</code>","text":"<p>Finds required parameter shapes of the operation models input_shape.</p> <p>Parameters:</p> Name Type Description Default <code>operation_model</code> <code>OperationModel</code> <p>botocore OperationModel obj of the Operation</p> required <p>Returns:</p> Type Description <code>List[Shape]</code> <p>List[Shape]: Required parameter shapes.</p>"},{"location":"reference/botocore_utils/#balcony.botocore_utils.get_shape_name","title":"<code>get_shape_name(shape)</code>","text":"<p>Returns the shapes name, using custom set 'key_name' attr</p> <p>Parameters:</p> Name Type Description Default <code>shape</code> <code>Shape</code> <p>botocore Shape obj</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Name of the shape.</p>"},{"location":"reference/botocore_utils/#balcony.botocore_utils.ifind_key_in_dict_keys","title":"<code>ifind_key_in_dict_keys(key, dict_keys)</code>","text":"<p>Case insensitive search for a <code>key</code> in a <code>list</code> or <code>dict.keys()</code>.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Search case insensively for</p> required <code>dict_keys</code> <code>Union[list, dict]</code> <p>In a list or keys of dictionary</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Found key that case insensively matches the given key.</p>"},{"location":"reference/botocore_utils/#balcony.botocore_utils.is_shape_non_collection_type","title":"<code>is_shape_non_collection_type(shape_and_target_path)</code>","text":"<p>Boolean function to check ShapeAndTargetPath Named Tuple</p> <p>Parameters:</p> Name Type Description Default <code>shape_and_target_path</code> <code>ShapeAndTargetPath</code> <p>Named Tuple</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>description</p>"},{"location":"reference/botocore_utils/#balcony.botocore_utils.rich_str_shape","title":"<code>rich_str_shape(shape, remove_documentation=False)</code>","text":"<p>Transforms a Shape to rich supported string.</p> <p>Parameters:</p> Name Type Description Default <code>shape</code> <code>Shape</code> <p>botocore.model.Shape object.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Rich string for shape.</p>"},{"location":"reference/registries/","title":"Registries","text":""},{"location":"reference/registries/#balcony.registries.ResourceNodeRegistry","title":"<code>ResourceNodeRegistry</code>","text":""},{"location":"reference/registries/#balcony.registries.ResourceNodeRegistry.find_custom_class_for_resource_node","title":"<code>find_custom_class_for_resource_node(service_name, node_name)</code>","text":"<p>Try to find the ResourceNode's custom subclasses registered under the Service.</p> <p>Returns:</p> Type Description <code>Union[ResourceNode, bool]</code> <p>Union[\"ResourceNode\", bool] : False if no custom class is found, else the custom class</p>"},{"location":"reference/registries/#balcony.registries.ResourceNodeRegistry.register_class","title":"<code>register_class(cls, service_name=None, name=None)</code>","text":"<p>Register a subclass of ResourceNode with the given <code>service_name</code> and <code>name</code>. When a ResourceNode object is created, registered classes will be selected as the ResourceNode class. This allows overriding ability to each service/resource.</p> <p>Parameters:</p> Name Type Description Default <code>cls</code> <code>ResourceNode</code> <p>A subclass of ResourceNode</p> required <code>service_name</code> <code>str</code> <p>ServiceNode name, must be provided. Defaults to None.</p> <code>None</code> <code>name</code> <code>str</code> <p>ResourceNode name, must be provided. Defaults to None.</p> <code>None</code>"},{"location":"reference/registries/#balcony.registries.ResourceNodeRegistry.search_registry_for_service","title":"<code>search_registry_for_service(service_name)</code>","text":"<p>Returns services registered custom ResourceNode subclasses.</p> <p>Returns:</p> Type Description <code>Dict[str, ResourceNode]</code> <p>Dict[str, 'ResourceNode']: ResourceNode name to custom Subclasses mapping for the service.</p>"},{"location":"reference/relations/","title":"Relations","text":""},{"location":"reference/relations/#balcony.relations.Relation","title":"<code>Relation</code>  <code>dataclass</code>","text":"<p>Basic dataclass to hold the relation information.</p>"},{"location":"reference/relations/#balcony.relations.RelationMap","title":"<code>RelationMap</code>","text":"<p>RelationMap represents a mapping <code>ParameterName</code> to <code>Relations List</code>. <code>generate_relation_map()</code> function generates the RelationMap dictionary for given ServiceNode.</p> <p>ServiceNode caches the RelationMap dictionary to a file, because calculating it requires a lot of loops.</p> Example RelationMap dictionary<pre><code> {\n    \"PolicyArn\": [\n        {\n            \"service_name\": \"iam\",\n            \"resource_node_name\": \"Policy\",\n            \"required_shape_name\": \"PolicyArn\",\n            \"target_shape_name\": \"Arn\",\n            \"target_shape_type\": \"string\",\n            \"operation_name\": \"ListPolicies\",\n            \"target_path\": \"Policies[*].Arn\"\n        }\n    ],\n}\n</code></pre>"},{"location":"reference/relations/#balcony.relations.RelationMap.deserialize_relation_map","title":"<code>deserialize_relation_map(serialized_relations_map)</code>","text":"<p>Deserializes the RelationMap dictionary from a json serialized dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>serialized_relations_map</code> <code>Dict</code> <p>Json serialized dictionary</p> required <p>Returns:</p> Name Type Description <code>Dict</code> <code>Dict</code> <p>RelationMap dictionary</p>"},{"location":"reference/relations/#balcony.relations.RelationMap.generate_relation_map","title":"<code>generate_relation_map(**kwargs)</code>","text":"<p>Generates the required parameter name to its relations mapping. RelationMap structure<pre><code>{\n    \"ParameterName1\": [{}, {} ],\n    \"ParameterName2\": [{}, ]\n}\n</code></pre></p> <p>Returns:</p> Type Description <code>Dict[str, list]</code> <p>Dict[str, list]: Generated parameter names to Relation dict list map</p>"},{"location":"reference/relations/#balcony.relations.RelationMap.get_parameters_generated_relations","title":"<code>get_parameters_generated_relations(parameter_name, exclude_operation_name)</code>","text":"<p>Checks the <code>RelationMap</code> dictionary for the key: <code>parameter_name</code> to get the generated relations for the given parameter name.</p> <p>Parameters:</p> Name Type Description Default <code>parameter_name</code> <code>str</code> <p>Parameter name to search for its relations</p> required <code>exclude_operation_name</code> <code>str</code> <p>Exclude the given operation_name across found relation dicts</p> required <p>Returns:</p> Type Description <code>List[Dict]</code> <p>List[Dict]: List of relations</p>"},{"location":"reference/relations/#balcony.relations.RelationMap.get_relations_map","title":"<code>get_relations_map(refresh=False)</code>","text":"<p>Tries the fetch the cached RelationMap from file, or generates and saves it to file.</p> <p>Parameters:</p> Name Type Description Default <code>refresh</code> <code>bool</code> <p>Disables cache. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>Dict</code> <code>Dict</code> <p><code>RelationMap</code> dictionary. parameter_name-&gt;[relations,] mapping.</p>"},{"location":"reference/relations/#balcony.relations.RelationMap.save_relations_map_to_file","title":"<code>save_relations_map_to_file(relations_map=None)</code>","text":"<p>Saves the generated relations map to <code>{BALCONY_RELATIONS_DIR}/{service_name}.json</code></p> <p>Parameters:</p> Name Type Description Default <code>relations_map</code> <code>List[Dict]</code> <p>description. Defaults to None.</p> <code>None</code>"},{"location":"reference/relations/#balcony.relations.RelationMap.serialize_relations_map","title":"<code>serialize_relations_map(relations_map)</code>","text":"<p>Serializes the RelationMap dictionary to a json serializable dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>relations_map</code> <code>Dict</code> <p>RelationMap dictionary</p> required <p>Returns:</p> Name Type Description <code>Dict</code> <code>Dict</code> <p>Json serialized dictionary</p>"},{"location":"reference/resource-node/","title":"ResourceNode","text":""},{"location":"reference/resource-node/#balcony.nodes.ResourceNode.__init_subclass__","title":"<code>__init_subclass__(service_name=None, name=None, **kwargs)</code>","text":"<p>Initializes the custom subclasses of ResourceNode to ResourceNodeRegistry.</p> <p>Parameters:</p> Name Type Description Default <code>service_name</code> <code>_type_</code> <p>Name of the AWS service. Defaults to None.</p> <code>None</code> <code>name</code> <code>_type_</code> <p>Name of the AWS Resource Node. Defaults to None.</p> <code>None</code>"},{"location":"reference/resource-node/#balcony.nodes.ResourceNode.complement_api_parameters_list","title":"<code>complement_api_parameters_list(operation_name, related_operations_data, relations_of_operation, raw_api_parameters_list)</code>","text":"<p>Uses the <code>raw_api_parameters_list</code> and appends pagination parameters(MaxResults,...) to them.     Also provided for easy subclass overriding.</p> <p>Parameters:</p> Name Type Description Default <code>operation_name</code> <code>str</code> <p>Name of the operation.</p> required <code>related_operations_data</code> <code>Union[List, Dict]</code> <p>All related operations data</p> required <code>relations_of_operation</code> <code>List[Dict]</code> <p>Relations of the operation</p> required <code>raw_api_parameters_list</code> <code>List</code> <p>Generated raw API parameters</p> required <p>Returns:</p> Type Description <code>List[Dict]</code> <p>List[Dict]: Valid API parameters to call the boto operation with</p>"},{"location":"reference/resource-node/#balcony.nodes.ResourceNode.define_extra_relations","title":"<code>define_extra_relations()</code>","text":"<p>Extra relations defined in the custom subclasses of ResourceNode</p> <p>Returns:</p> Type Description <code>Union[List[Dict], List[Relation]]</code> <p>Union[List[Dict], List[Relation]]: List of relations as dicts or Relation objects</p>"},{"location":"reference/resource-node/#balcony.nodes.ResourceNode.generate_api_parameters_from_operation_data","title":"<code>generate_api_parameters_from_operation_data(operation_name, relations_of_operation, related_operations_data)</code>","text":"<p>Generates API parameters for the given operation including pagination parameters.</p> <p>Parameters:</p> Name Type Description Default <code>operation_name</code> <code>str</code> <p>Name of the operation</p> required <code>relations_of_operation</code> <code>List[Dict]</code> <p>Relations of the operation</p> required <code>related_operations_data</code> <code>Union[List, Dict]</code> <p>All related operations data</p> required <p>Returns:</p> Name Type Description <code>List</code> <code>Tuple[Union[List, bool], Union[Error, None]]</code> <p>Generated API Parameters to call the Operations with</p>"},{"location":"reference/resource-node/#balcony.nodes.ResourceNode.generate_jmespath_selector_from_relations","title":"<code>generate_jmespath_selector_from_relations(operation_name, relation_list)</code>","text":"<p>Tries to generate the jmespath selector string from given relations. Could be overridden with custom subclasses.</p> <p>Parameters:</p> Name Type Description Default <code>operation_name</code> <code>str</code> <p>Name of the operation</p> required <code>relation_list</code> <code>List[Dict]</code> <p>List of relations for the operation. Used to generate the jmespath selector.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Jmespath selector string</p>"},{"location":"reference/resource-node/#balcony.nodes.ResourceNode.get_operation_names","title":"<code>get_operation_names()</code>","text":"<p>Returns the available operation names in the ResourceNode.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]: Operation names tied to the ResourceNode</p>"},{"location":"reference/resource-node/#balcony.nodes.ResourceNode.get_operations_relations","title":"<code>get_operations_relations(operation_name)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>operation_name</code> <code>str</code> <p>Name of the operation.</p> required <p>Returns:</p> Type Description <code>Tuple[Union[List[Dict], bool], Union[Error, None]]</code> <p>Tuple[Union[List[Dict], bool], Union[Error, None]]: Returns value and error.                                                     True: No required parameters                                                     False: Failure                                                 List[Dict]: List of relations</p>"},{"location":"reference/resource-node/#balcony.nodes.ResourceNode.get_pagination_token_output_to_parameter_name_mapping","title":"<code>get_pagination_token_output_to_parameter_name_mapping(operation_name)</code>","text":"<p>Some Operations paginate their output using Pagination Token Parameters defined in <code>PAGINATION_TOKEN_KEYS</code>.</p> <p>Parameters:</p> Name Type Description Default <code>operation_name</code> <code>str</code> <p>Name of the operation in the resource_node.</p> required <p>Returns:</p> Type Description <code>Union[Dict[str, str], bool]</code> <p>Union[Dict[str, str], bool]: False or A dictionary with <code>parameter_name</code> and <code>output_key</code> keys. e.g. <code>{\"parameter_name\":\"nextToken\", \"output_key\": \"NextToken\"}</code>.</p>"},{"location":"reference/service-node/","title":"class ServiceNode:","text":""},{"location":"reference/service-node/#balcony.nodes.ServiceNode.create_resource_node","title":"<code>create_resource_node(**kwargs)</code>","text":"<p>Creates the ResourceNode object with the given <code>kwargs</code>. Uses the <code>ResourceNodeRegistry</code> to find the custom subclasses of the <code>ResourceNode</code> class, else defaults to use the ResourceNode class</p> <p>Raises:</p> Type Description <code>Exception</code> <p>description</p> <p>Returns:</p> Name Type Description <code>ResourceNode</code> <code>ResourceNode</code> <p>description</p>"},{"location":"reference/service-node/#balcony.nodes.ServiceNode.find_resource_node_by_operation_name","title":"<code>find_resource_node_by_operation_name(operation_name)</code>","text":"<p>Traverses the ResourceNodes of the current ServiceNode and tries to find the ResourceNode that has the <code>operation_name</code> in it.</p> <p>Parameters:</p> Name Type Description Default <code>operation_name</code> <code>str</code> <p>Name of the operation</p> required <p>Returns:</p> Name Type Description <code>ResourceNode</code> <code>ResourceNode</code> <p>ResourceNode object that has the <code>operation_name</code>, or None.</p>"},{"location":"reference/service-node/#balcony.nodes.ServiceNode.get_event_system","title":"<code>get_event_system()</code>","text":"<p>Returns the boto3 clients event system</p>"},{"location":"reference/service-node/#balcony.nodes.ServiceNode.get_operation_names","title":"<code>get_operation_names()</code>","text":"<p>Returns the <code>operation_names</code> defined in the boto client._service_model</p>"},{"location":"reference/service-node/#balcony.nodes.ServiceNode.get_read_operation_name_to_tokens_map","title":"<code>get_read_operation_name_to_tokens_map()</code>","text":"<p>Generate <code>operation name to word tokens</code> map for the available read operations in the ServiceNode.</p> <p>Caches the output in the class attr. <code>_read_operation_name_to_tokens_map</code>.</p> <p>Returns:</p> Name Type Description <code>Dict</code> <code>Dict</code> <p>dictionary</p>"},{"location":"reference/service-node/#balcony.nodes.ServiceNode.get_read_operation_names","title":"<code>get_read_operation_names()</code>","text":"<p>Gets the operation names from the boto3 client and filters the operation names starting with <code>List</code>,<code>Get</code> or <code>Describe</code>.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]: Read Only operation names</p>"},{"location":"reference/service-node/#balcony.nodes.ServiceNode.get_relation_map","title":"<code>get_relation_map()</code>","text":"<p>Gets the relation map object.</p> <p>Returns:</p> Name Type Description <code>RelationMap</code> <code>RelationMap</code> <p>RelationMap object for the current ServiceNode</p>"},{"location":"reference/service-node/#balcony.nodes.ServiceNode.get_resource_node_by_name","title":"<code>get_resource_node_by_name(resource_node_name)</code>","text":"<p>Searches the current ServiceNode for the given <code>resource_node_name</code>, and returns it.</p> <p>Parameters:</p> Name Type Description Default <code>resource_node_name</code> <code>str</code> <p>Name of the ResourceNode</p> required <p>Returns:</p> Name Type Description <code>ResourceNode</code> <code>ResourceNode</code> <p>The ResourceNode object, <code>False</code> if not found.</p>"},{"location":"reference/service-node/#balcony.nodes.ServiceNode.get_resource_nodes","title":"<code>get_resource_nodes()</code>","text":"<p>Gets the available <code>ResourceNode</code>s of the current ServiceNode</p> <p>Returns:</p> Type Description <code>List[ResourceNode]</code> <p>List[ResourceNode]: List of <code>ResourceNode</code>s available in the ServiceNode</p>"},{"location":"reference/service-node/#balcony.nodes.ServiceNode.get_service_model","title":"<code>get_service_model()</code>","text":"<p>Returns the ServiceModel obj from boto3 client</p>"},{"location":"reference/service-node/#balcony.nodes.ServiceNode.get_service_reader","title":"<code>get_service_reader()</code>","text":"<p>Returns/creates the ServiceReader for the current ServiceNode</p> <p>Returns:</p> Name Type Description <code>ServiceReader</code> <code>ServiceReader</code> <p>ServiceReader object for current ServiceNode</p>"},{"location":"reference/service-reader/","title":"class ServiceReader:","text":""},{"location":"reference/service-reader/#balcony.reader.ServiceReader","title":"<code>ServiceReader</code>","text":"<p>Upon initialization ServiceReaders defines a dictionary called <code>response_data</code>. Caled operations are stored in this dictionary. self.response_data data hierarchy<pre><code>{\n    \"ResourceNodeName\": {\n        \"OperationName1\": [{response1 dict}, {response2 dict}, ...],\n        \"OperationName2\": [{response1 dict},...],\n    }\n}\n</code></pre></p>"},{"location":"reference/service-reader/#balcony.reader.ServiceReader.__init__","title":"<code>__init__(service_node)</code>","text":"<p>Initializes the reader with the <code>service_node</code>.</p> <p>Parameters:</p> Name Type Description Default <code>service_node</code> <code>ServiceNode</code> <p>Associated ServiceNode.</p> required"},{"location":"reference/service-reader/#balcony.reader.ServiceReader.add_to_node_data","title":"<code>add_to_node_data(resource_node_name, operation_name, response)</code>","text":"<p>Adds boto3 api response to operations existing data.</p> <p>Parameters:</p> Name Type Description Default <code>resource_node_name</code> <code>str</code> <p>Name of the ResourceNode</p> required <code>operation_name</code> <code>str</code> <p>Name of the Operation</p> required <code>response</code> <code>dict</code> <p>boto API response dict</p> required"},{"location":"reference/service-reader/#balcony.reader.ServiceReader.call_operation","title":"<code>call_operation(resource_node, operation_name, api_parameter, follow_pagination=False)</code>","text":"<p>Calls the given AWS operation with <code>api_parameter</code> dict. Saves the response data on <code>self.response_data</code> and returns it.</p> <p>Parameters:</p> Name Type Description Default <code>resource_node</code> <code>ResourceNode</code> <p>Operations Resource Node</p> required <code>operation_name</code> <code>str</code> <p>Name of the operation</p> required <code>api_parameter</code> <code>dict</code> <p>dictionary to call the operation with</p> required <code>follow_pagination</code> <code>Optional[bool]</code> <p>If the operations output is truncated follow the pagination tokens.</p> <code>False</code> <p>Returns:</p> Type Description <code>Union[dict, bool]</code> <p>Union[dict, bool]: <code>False</code> or response got from AWS API</p>"},{"location":"reference/service-reader/#balcony.reader.ServiceReader.clear_operations_data","title":"<code>clear_operations_data(resource_node_name, operation_name)</code>","text":"<p>Refreshes the operations data to empty list.</p> <p>Parameters:</p> Name Type Description Default <code>resource_node_name</code> <code>str</code> <p>Name of the ResourceNode</p> required <code>operation_name</code> <code>str</code> <p>Name of the Operation</p> required"},{"location":"reference/service-reader/#balcony.reader.ServiceReader.read_operation","title":"<code>read_operation(resource_node_name, operation_name, match_patterns=None, refresh=False, follow_pagination=False)</code>","text":"<p>Reads the given operation. If the operation is called with generated parameters, <code>match_patterns</code> can be used to filter the generated parameters.</p> <p>Parameters:</p> Name Type Description Default <code>resource_node_name</code> <code>str</code> <p>Name of the Resource Node</p> required <code>operation_name</code> <code>str</code> <p>Name of the Operation</p> required <code>match_patterns</code> <code>List[str]</code> <p>UNIX style patterns to filter matching generated parameters. Defaults to None.</p> <code>None</code> <code>refresh</code> <code>bool</code> <p>Get the cached data or force re-reading the operation. Defaults to False.</p> <code>False</code> <code>follow_pagination</code> <code>bool</code> <p>Follow pagination tokens. If not only set True, one page call will be made.</p> <code>False</code> <p>Returns:</p> Type Description <code>Tuple[Union[List, bool], Union[Error, None]]</code> <p>Tuple[Union[List, bool], Union[Error, None]]: description</p>"},{"location":"reference/service-reader/#balcony.reader.ServiceReader.read_resource_node","title":"<code>read_resource_node(resource_node_name, match_patterns=None, refresh=False, follow_pagination=False)</code>","text":"<p>Reads all available operations in the given a resource node</p> <p>Parameters:</p> Name Type Description Default <code>resource_node_name</code> <code>str</code> <p>description</p> required <code>match_patterns</code> <code>List[str]</code> <p>UNIX style patterns to filter the generated parameters. Defaults to None.</p> <code>None</code> <code>refresh</code> <code>Optional[bool]</code> <p>Use the cached data or always make new calls. Defaults to False.</p> <code>False</code> <code>follow_pagination</code> <code>Optional[bool]</code> <p>Follow pagination if the output is truncated.. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>Union[Dict, bool]</code> <p>Union[Dict, bool]: Data read if successful, or False.</p>"},{"location":"reference/service-reader/#balcony.reader.ServiceReader.search_operation_data","title":"<code>search_operation_data(resource_node_name, operation_name)</code>","text":"<p>Get the currently read and available operation data.</p> <p>Parameters:</p> Name Type Description Default <code>resource_node_name</code> <code>str</code> <p>Name of the ResourceNode</p> required <code>operation_name</code> <code>str</code> <p>Name of the Operation</p> required <p>Returns:</p> Type Description <code>Union[List[dict], bool]</code> <p>Union[List[dict], bool]: <code>False</code> or Operations data</p>"},{"location":"reference/service-reader/#balcony.reader.ServiceReader.search_resource_node_data","title":"<code>search_resource_node_data(resource_node_name)</code>","text":"<p>Gets all data available for the ResourceNode, including all of its operations.</p> <p>Parameters:</p> Name Type Description Default <code>resource_node_name</code> <code>str</code> <p>Name of the ResourceNode</p> required <p>Returns:</p> Type Description <code>Union[dict, bool]</code> <p>Union[dict, bool]: <code>False</code> or all operations data of the given ResourceNode</p>"},{"location":"reference/utils/","title":"utils","text":""},{"location":"reference/utils/#balcony.utils.are_two_lists_same","title":"<code>are_two_lists_same(list_one, list_two)</code>","text":"<p>Compares the contents of two lists</p>"},{"location":"reference/utils/#balcony.utils.camel_case_split","title":"<code>camel_case_split(identifier)</code>","text":"<p>Splits CamelCase string to it's tokens</p>"},{"location":"reference/utils/#balcony.utils.compare_nouns","title":"<code>compare_nouns(word1, word2)</code>","text":"<p>Singular/plural insensitive word comparison</p>"},{"location":"reference/utils/#balcony.utils.compare_two_token_lists","title":"<code>compare_two_token_lists(token_list_one, token_list_two)</code>","text":"<p>Compares to word lists one by one in lowercase</p>"},{"location":"reference/utils/#balcony.utils.find_all_yaml_files","title":"<code>find_all_yaml_files(directory)</code>","text":"<p>Find all .yaml files in a directory with the exception of files starting with \"_\".</p> <p>Parameters:</p> Name Type Description Default <code>directory</code> <code>str</code> <p>Directory to search for yaml files</p> required <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]: List of yaml file paths</p>"},{"location":"reference/utils/#balcony.utils.get_all_available_services","title":"<code>get_all_available_services(session)</code>","text":"<p>Gets available services from boto3 session</p>"},{"location":"reference/utils/#balcony.utils.icompare_two_token_lists","title":"<code>icompare_two_token_lists(token_list_one, token_list_two)</code>","text":"<p>Singular/plural insensitive token list comparison</p>"},{"location":"reference/utils/#balcony.utils.ifind_similar_names_in_list","title":"<code>ifind_similar_names_in_list(search_for, search_in_list)</code>","text":"<p>Case insensitive find in list</p>"},{"location":"reference/utils/#balcony.utils.is_terraform_aws_resource_type","title":"<code>is_terraform_aws_resource_type(resource_type)</code>","text":"<p>Check for terraform aws resource type being valid</p> <p>Parameters:</p> Name Type Description Default <code>resource_type</code> <code>str</code> <p>Check for terraform aws resource type being valid</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>is resource type valid</p>"},{"location":"reference/utils/#balcony.utils.is_word_in_a_list_of_words","title":"<code>is_word_in_a_list_of_words(word, list_of_words)</code>","text":"<p>Checks if a word is a is in a list_of_words, case insensitive</p>"},{"location":"reference/utils/#balcony.utils.str_relations","title":"<code>str_relations(relations)</code>","text":"<p>Stringify list of relations</p>"},{"location":"reference/yaml-resource-node/","title":"YamlResourceNode","text":"<p>               Bases: <code>ResourceNode</code></p>"},{"location":"reference/yaml-resource-node/#balcony.nodes.YamlResourceNode.__init__","title":"<code>__init__(service_node, name, operation_names, yaml_config=None)</code>","text":"<p>Initializes the YamlResourceNode with <code>yaml_config</code>.</p> <p>Parameters:</p> Name Type Description Default <code>service_node</code> <code>ServiceNode</code> <p>ServiceNode object</p> required <code>name</code> <code>str</code> <p>Name of the ResourceNode</p> required <code>operation_names</code> <code>List[str]</code> <p>Names of the ResourceNode's operations</p> required <code>yaml_config</code> <code>Dict</code> <p>Yaml Configuration defined in the <code>custom_yamls/*</code>. Defaults to None.</p> <code>None</code>"},{"location":"reference/yaml-resource-node/#balcony.nodes.YamlResourceNode.complement_api_parameters_list","title":"<code>complement_api_parameters_list(operation_name, related_operations_data, relations_of_operation, raw_api_parameters_list)</code>","text":"<p>After the api parameter genereation is done, this function will be called for each api_parameter generated to complement(add/remove parameters) it.</p> Example yaml_config def. for complement_api_parameters<pre><code># This option overrides the `complement_api_parameters_list` function.\ncomplement_api_parameters:\n# This option will be evoked after api parameter generation is\n# complete. You can use this feature to add key/value pairs,\n- action: add\n  data:\n    any: data\n    is: OK\n    to: add\n#  or remove keys from all generated API parameters.\n- action: remove\n  keys:\n    - remove\n    - these\n    - keys\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>operation_name</code> <code>str</code> <p>description</p> required <code>related_operations_data</code> <code>Union[List, Dict]</code> <p>description</p> required <code>relations_of_operation</code> <code>List[Dict]</code> <p>description</p> required <code>raw_api_parameters_list</code> <code>List</code> <p>description</p> required <p>Returns:</p> Name Type Description <code>List</code> <code>List</code> <p>description</p>"},{"location":"reference/yaml-resource-node/#balcony.nodes.YamlResourceNode.define_extra_relations","title":"<code>define_extra_relations()</code>","text":"<p>Reads the Yaml Configuration for extra_relations defined, and returns the Relation objects.</p> <p>Returns:</p> Type Description <code>Union[List[Dict], List[Relation]]</code> <p>Union[List[Dict], List[Relation]]: Extra relations if they're defined in the Yaml configuration.</p>"},{"location":"reference/yaml-resource-node/#balcony.nodes.YamlResourceNode.generate_api_parameters_from_operation_data","title":"<code>generate_api_parameters_from_operation_data(operation_name, relations_of_operation, related_operations_data)</code>","text":"<p>Finds the <code>override_api_parameters</code> in the <code>yaml_config</code> for the selected operation.</p> <p>Parameters:</p> Name Type Description Default <code>operation_name</code> <code>str</code> <p>AWS Operation name</p> required <code>relations_of_operation</code> <code>List[Dict]</code> <p>Relation obj list for the Operation</p> required <code>related_operations_data</code> <code>Union[List, Dict]</code> <p>Related operations are called beforehand and this is their data.</p> required <p>Returns:</p> Type Description <code>Tuple[Union[List, bool], Union[Error, None]]</code> <p>Tuple[Union[List, bool], Union[Error, None]]: (value, error) tuple.</p>"},{"location":"reference/yaml-resource-node/#balcony.nodes.YamlResourceNode.generate_jmespath_selector_from_relations","title":"<code>generate_jmespath_selector_from_relations(operation_name, relation_list)</code>","text":"<p>Finds the <code>jmespath_selector</code> definition in the <code>yaml_config</code> for the selected Operation.</p> <p>Parameters:</p> Name Type Description Default <code>operation_name</code> <code>str</code> <p>AWS Operation name.</p> required <code>relation_list</code> <code>List[Dict]</code> <p>List of relations for the operation</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>JMESPath selector string for extracting api parameters.</p>"},{"location":"reference/yaml-resource-node/#balcony.nodes.YamlResourceNode.get_operations_relations","title":"<code>get_operations_relations(operation_name)</code>","text":"<p>Finds the defined <code>explicit_relations</code> in the yaml_config for the given operation.</p> <p>Parameters:</p> Name Type Description Default <code>operation_name</code> <code>str</code> <p>AWS Operation Name.</p> required <p>Returns:</p> Type Description <code>Tuple[Union[List[Dict], bool], Union[Error, None]]</code> <p>Tuple[Union[List[Dict], bool], Union[Error, None]]: Returns (value, error) tuple.</p>"},{"location":"reference/yaml-resource-node/#balcony.nodes.YamlResourceNode.get_pagination_token_output_to_parameter_name_mapping","title":"<code>get_pagination_token_output_to_parameter_name_mapping(operation_name)</code>","text":"<p>Tries to find the pagination token in the yaml_config for the given operation.</p> pagination_token_output_to_parameter_name_mapping example<pre><code>{\n    \"parameter_name\": \"\",\n    \"output_key\": \"\"\n}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>operation_name</code> <code>str</code> <p>AWS Operation name.</p> required <p>Returns:</p> Type Description <code>Union[Dict[str, str], bool]</code> <p>Union[Dict[str, str], bool]: A dictionary with pagination token as key and parameter name as value.</p> <code>Union[Dict[str, str], bool]</code> <p>If no pagination token is defined, then returns False.</p>"},{"location":"reference/yaml_configuration/","title":"Yaml Configuration Helpers","text":"<p>This page contains the documentation for the helper <code>.py</code> files with the helper functionality for custom yaml configuration options for Resource Nodes.</p>"},{"location":"reference/yaml_configuration/#yaml_config","title":"yaml_config","text":"<p>Includes the <code>pydantic</code> definitions for the YAML configuration options.</p>"},{"location":"reference/yaml_configuration/#balcony.yaml_config.find_and_parse_yaml_services","title":"<code>find_and_parse_yaml_services()</code>","text":"<p>Searches and finds the defined yaml files in the YAML_SERVICES_DIRECTORY directory that are not starting with '_'</p> <p>Returns:</p> Type Description <code>List[YamlService]</code> <p>List[YamlService]: List of found YamlServices, created from yaml files</p>"},{"location":"reference/yaml_configuration/#balcony.yaml_config.parse_yaml_file_to_service","title":"<code>parse_yaml_file_to_service(yaml_file_path)</code>","text":"<p>Parses given YAML file and returns a pydantic model: YamlService object</p> <p>Parameters:</p> Name Type Description Default <code>yaml_file_path</code> <code>str</code> <p>Filepath for the yaml file</p> required <p>Returns:</p> Name Type Description <code>YamlService</code> <code>YamlService</code> <p>Input data parsed as a pydantic YamlService object</p> <code>Union[Exception, None]</code> <p>Exception or <code>None</code>: Exception if raised during parsing, or None if successful</p>"},{"location":"reference/yaml_configuration/#yaml_validators","title":"yaml_validators","text":"<p>Yaml parsers and helper functions.</p>"},{"location":"reference/yaml_configuration/#balcony.yaml_validators.YamlComplementApiParameterAction","title":"<code>YamlComplementApiParameterAction</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Defines the <code>add</code> and <code>remove</code> options for complement_api_parameters in YamlResourceNodeOperation</p> Source code in <code>balcony/yaml_validators.py</code> <pre><code>class YamlComplementApiParameterAction(BaseModel):\n    \"\"\"Defines the `add` and `remove` options for complement_api_parameters in YamlResourceNodeOperation\"\"\"\n    _ACTION_TYPES = (\"add\", \"remove\")\n\n    action: str\n    data: Optional[Dict[str, Any]]\n    keys: Optional[List[str]]\n\n    @validator(\"action\")\n    def action_must_be_valid(cls, v):\n        \"\"\"Validates the action field. Must be 'add' or 'remove'\"\"\"\n        if v not in cls._ACTION_TYPES:\n            raise ValueError(\"action must be 'add' or 'remove'\")\n        return v\n</code></pre>"},{"location":"reference/yaml_configuration/#balcony.yaml_validators.YamlComplementApiParameterAction.action_must_be_valid","title":"<code>action_must_be_valid(v)</code>","text":"<p>Validates the action field. Must be 'add' or 'remove'</p> Source code in <code>balcony/yaml_validators.py</code> <pre><code>@validator(\"action\")\ndef action_must_be_valid(cls, v):\n    \"\"\"Validates the action field. Must be 'add' or 'remove'\"\"\"\n    if v not in cls._ACTION_TYPES:\n        raise ValueError(\"action must be 'add' or 'remove'\")\n    return v\n</code></pre>"},{"location":"reference/yaml_configuration/#balcony.yaml_validators.YamlResourceNodeOperation","title":"<code>YamlResourceNodeOperation</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Defines the customizations for a specific operation in a Resource Node.</p> Source code in <code>balcony/yaml_validators.py</code> <pre><code>class YamlResourceNodeOperation(BaseModel):\n    \"\"\"Defines the customizations for a specific operation in a Resource Node.\"\"\"\n    operation_name: str\n    jmespath_selector: Optional[str]\n    complement_api_parameters: Optional[List[YamlComplementApiParameterAction]]\n    explicit_relations: Optional[List[YamlRelation]]\n    override_api_parameters: Optional[List[Dict[str, Any]]]\n    pagination_token_mapping: Optional[Dict[str, str]]\n    required_parameters: Optional[List[str]]\n</code></pre>"},{"location":"reference/yaml_configuration/#balcony.yaml_validators.YamlService","title":"<code>YamlService</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Defines a Service in a Yaml file. It can have multiple Resource Nodes</p> Source code in <code>balcony/yaml_validators.py</code> <pre><code>class YamlService(BaseModel):\n    \"\"\"Defines a Service in a Yaml file. It can have multiple Resource Nodes\"\"\"\n    service_name: str\n    resource_nodes: Optional[List[YamlServiceResourceNode]]\n</code></pre>"},{"location":"reference/yaml_configuration/#balcony.yaml_validators.YamlServiceResourceNode","title":"<code>YamlServiceResourceNode</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Defines a Resource Node in a Service. It can have extra_relations and list of operations</p> Source code in <code>balcony/yaml_validators.py</code> <pre><code>class YamlServiceResourceNode(BaseModel):\n    \"\"\"Defines a Resource Node in a Service. It can have extra_relations and list of operations\"\"\"\n    resource_node_name: str\n    extra_relations: Optional[List[YamlRelation]]\n    operations: Optional[List[YamlResourceNodeOperation]]\n</code></pre>"},{"location":"slides/slide/","title":"balcony","text":"<p>AWS API for us humans. beep boop. </p>"},{"location":"slides/slide/#agenda","title":"Agenda","text":"<ol> <li>What balcony helps with</li> <li>About the AWS SDK &amp; API</li> <li>How balcony works</li> <li></li> </ol>"},{"location":"slides/slide/#what-do-balcony-do","title":"What do balcony do?","text":"<ul> <li>balcony trivializes reading anything from AWS API</li> <li>You only need to provide the <code>service name</code> and <code>resource name</code> and data is yours</li> <li>For example:   <pre><code>balcony aws iam Policy\n\nbalcony aws ec2 Vpcs\n</code></pre></li> </ul>"},{"location":"slides/slide/#undifferentiated-heavy-lifting-that-is-reading-from-sdk","title":"Undifferentiated heavy lifting that is reading from SDK","text":"<ul> <li>Detail views almost always require an identifier (<code>GetPolicy</code> - <code>PolicyArn</code>)</li> <li>Subresources requires their parent resources id (<code>BucketPolicy</code> - <code>BucketName</code>)</li> </ul> <p>balcony fills out the required parameters for any operation, automatically.</p> <p></p> <p>Let's take the above example of <code>GetUserPolicy</code>:</p> <ul> <li>balcony would first read every <code>User</code></li> <li>and then it'd feed the each <code>UserName</code> to the <code>GetUserPolicy</code> operation.</li> </ul>"},{"location":"slides/slide/#howd-it-look-on-code","title":"How'd it look on code","text":"<pre><code>import boto3\niam_client = boto3.client('iam')\n# First get the list of all policies\nall_policies = iam_client.list_policies()\n\n# and then get detail per policy \nfor policy in all_policies.get('Policies'):\n  single_policy = iam_client.get_policy(\n      PolicyArn = policy['Arn']\n  )\n</code></pre>"},{"location":"slides/slide/#lets-talk-about-aws-sdk-api","title":"Let's talk about AWS SDK &amp; API","text":"<ul> <li>AWS SDK for Python3 is boto3, and it uses the botocore under the hood</li> <li>boto3 is the Python3 wrapper for the AWS  HTTP API</li> </ul>"},{"location":"slides/slide/#sheer-size-of-aws-sdk","title":"Sheer size of AWS SDK","text":"Type Count Service 318 Read Only Operations 4577 All Operations 12129"},{"location":"slides/slide/#rhetoric-howd-you-write-a-sdk-for-an-existing-api","title":"Rhetoric: How'd you write a SDK for an existing API?","text":""},{"location":"slides/slide/#possibly-youd-consider-the-scale-of-it-right","title":"Possibly you'd consider the scale of it, right?","text":"<ul> <li>wouldn't make sense to code each operation on its own</li> <li>maybe ReInvent is closing in, and you'd get more services &amp; operations to code</li> <li>oh, and there're many languages to code the SDK for</li> </ul>"},{"location":"slides/slide/#answer-is-automation-as-always","title":"Answer is automation, as always","text":"<p>Good people at AWS did a great job at this.</p> <p>In fact, whole boto3 functionality is generated from <code>json</code></p> <pre><code>import boto3\n\niam_client = boto3.client('iam')\n</code></pre> <p>You can see that we refer to services by name, instead of accessing composite objects, like <code>boto3.iam</code> \u2014 hinting at its generated nature.</p>"},{"location":"slides/slide/#service-definition-json-files","title":"Service definition json files","text":"<p>Encapsulates everything needed for making an API Request: - endpoint \u2014 URI - input format \u2014 Parameters - output format \u2014 Response - possible errors \u2014 Exceptions</p>"},{"location":"slides/slide/#outline-of-boto-service-definitions","title":"Outline of Boto Service definitions","text":"<p>botocore/botocore/data/iam/2010-05-08/service-2.json</p>"},{"location":"slides/slide/#version20-metadata-operations-shapes-documentation","title":"<pre><code>{\n  \"version\":\"2.0\",\n  \"metadata\": {...},\n  \"operations\":{...},\n  \"shapes\":{...},\n  \"documentation\": \"...\"\n}\n</code></pre>","text":""},{"location":"slides/slide/#boto-service-definitions-metadata","title":"Boto Service definitions: metadata","text":"<pre><code>\"metadata\":{\n    \"apiVersion\":\"2010-05-08\",\n    \"endpointPrefix\":\"iam\",\n    \"globalEndpoint\":\"iam.amazonaws.com\",\n    \"protocol\":\"query\",\n    \"serviceAbbreviation\":\"IAM\",\n    \"serviceFullName\":\"AWS Identity and Access Management\",\n    \"serviceId\":\"IAM\",\n    \"signatureVersion\":\"v4\",\n    \"uid\":\"iam-2010-05-08\",\n    \"xmlNamespace\":\"https://iam.amazonaws.com/doc/2010-05-08/\"\n}\n</code></pre>"},{"location":"slides/slide/#boto-aws-service-definitions-shapes","title":"Boto AWS Service definitions: shapes","text":"<pre><code>\"shapes\":{\n    \"GetPolicyRequest\":{\n        \"type\":\"structure\",\n        \"required\":[\"PolicyArn\"],\n        \"members\":{\n            \"PolicyArn\":{\n              \"shape\":\"arnType\",\n              \"documentation\":\"The Amazon Resource Name(ARN)\n                               of the managed policy\"\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"slides/slide/#boto-aws-service-definitions-operations","title":"Boto AWS Service definitions: operations","text":"<pre><code>\"operations\":{\n    \"GetPolicy\":{\n      \"name\":\"GetPolicy\",\n      \"http\":{\n        \"method\":\"POST\",\n        \"requestUri\":\"/\"\n      },\n      \"input\":{\"shape\":\"GetPolicyRequest\"},\n      \"output\":{\n        \"shape\":\"GetPolicyResponse\",\n        \"resultWrapper\":\"GetPolicyResult\"\n      },\n      \"errors\":[\n        {\"shape\":\"NoSuchEntityException\"},\n        {\"shape\":\"InvalidInputException\"},\n        {\"shape\":\"ServiceFailureException\"}\n      ],\n      \"documentation\":\"&lt;p&gt;Retrieves information about the \n      specified managed policy, including the policy's default \n      version and the...\"\n    }\n}\n</code></pre>"},{"location":"slides/slide/#boto3-clients-operations","title":"boto3 clients &amp; operations","text":"<p>Every boto3 client has a <code>_PY_TO_OP_NAME</code> mapping that looks like this:</p> <p>Types of requests you can make to AWS API are internally called <code>Operation</code></p> boto3 client function Operation Name attach_role_policy AttachRolePolicy create_role CreateRole delete_role DeleteRole detach_role_policy DetachRolePolicy get_role GetRole --- <p>You might be already familiar with <code>Operations</code> because they are the exact same thing as the Action segment on IAM Policies.</p> <p>Example IAM Policy <pre><code>{\n  \"Statement\": [\n    {\n        \"Effect\": \"Allow\",\n        \"Resource\": \"*\",\n        \"Action\": [\n            \"cloudwatch:Describe*\",\n            \"ec2:DescribeSubnets\",\n            \"ec2:DescribeVpcs\",\n            \"iam:ListRoles\",\n            \"iam:GetRole\",\n            \"logs:Create*\",\n        ]\n    }\n  ]\n}\n</code></pre></p>"},{"location":"slides/slide/#how-balcony-works","title":"How balcony works","text":""},{"location":"slides/slide/#-only-uses-the-read-only-operations","title":"- only uses the Read Only Operations","text":""},{"location":"slides/slide/#quick-look-at-the-iam-operations","title":"quick look at the IAM operations","text":"get operations list operations GetGroup ListGroups GetGroupPolicy ListGroupPolicies GetPolicy ListPolicies GetRole ListRoles GetRolePolicy ListRolePolicies GetUser ListUsers"},{"location":"slides/slide/#operations-can-be-grouped-under-their-resource-names","title":"operations can be grouped under their resource names","text":"Resource Node Operations Group GetGroup, ListGroups GroupPolicy GetGroupPolicy, ListGroupPolicies Policy GetPolicy, ListPolicies Role GetRole, ListRoles RolePolicy GetRolePolicy, ListRolePolicies User GetUser, ListUsers"},{"location":"slides/slide/#how-to-read-the-iam-policies","title":"How to read the IAM policies","text":""}]}